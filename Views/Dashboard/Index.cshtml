@model PlusCP.Models.DashboardModel
@{
    ViewBag.Title = "Dashboard Index";
    Layout = null;
}

<link rel="stylesheet" type="text/css" href="~/Content/css/jquery.gridster.css" />
<script type="text/javascript" src="~/Scripts/jquery.gridster.js"></script>
<link href="~/Content/css/message.css" rel="stylesheet" />
<!-- Bootstrap DateTime Picker CSS -->

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css">

<style type="text/css">

    body {
        /*margin-top: 20px;*/
        background: linear-gradient(to right, white, #D6EFE8);
    }

    .order-card {
        color: white;
    }

    .bg-c-blue,
    .bg-c-green,
    .bg-c-yellow,
    .bg-c-pink {
        background: linear-gradient(45deg, #003B59, #003B59);
    }

    .card {
        border-radius: 5px;
        -webkit-box-shadow: 0 1px 2.94px 0.06px rgba(4,26,55,0.16);
        box-shadow: 0 1px 2.94px 0.06px rgba(4,26,55,0.16);
        border: none;
        margin-bottom: 30px;
        -webkit-transition: all 0.3s ease-in-out;
        transition: all 0.3s ease-in-out;
        position: relative;
    }

        .card .card-block {
            padding: 20px;
        }

    .order-card i {
        font-size: 26px;
    }

    /* Hover effect */
    /*.card:hover {
        background: transparent;*/ /* Make background transparent on hover */
        /*border: 1px solid #003B59;*/ /* Thicker border with dark color on hover */
        /*color: #003B59;*/ /* Dark font color on hover */
        /*transform: scale(1.05);*/ /* Slightly scale up the card on hover */
        /*-webkit-box-shadow: 0 4px 8px rgba(0,0,0,0.2);*/ /* More pronounced shadow on hover */
        /*box-shadow: 0 4px 8px rgba(0,0,0,0.2);*/ /* More pronounced shadow on hover */
    /*}*/

    .f-left {
        float: left;
    }

    .f-right {
        float: right;
    }

    .CardPad {
        padding-top: 25px;
        padding-right: 25px;
    }

    .card:hover {
        transform: translateY(-5px); /* Adjust translateY as needed */
    }

    .card-content {
        padding: 10px;
    }

    /* Modal Styling */
    .modal-dialog {
        margin: 30px auto;
    }

        .modal-dialog.centered {
            display: flex;
            min-height: calc(100vh - 60px);
            align-content: stretch;
            flex-wrap: wrap;
            align-items: stretch;
            flex-direction: column;
            justify-content: center;
            width: 32%;
        }

    .modal-content {
        border-radius: 0;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        background-color: black;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }




    @@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800&display=swap");

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body,
    input,
    textarea {
        font-family: "Poppins", sans-serif;
    }

    .container {
        position: relative;
        width: 100%;
        padding: 0.5rem;
        background-color: #fafafa;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .form {
        width: 100%;
        max-width: 820px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 20px 1px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        overflow: hidden;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
    }

    .contact-form {
        background-color: #325FAB;
        position: relative;
    }

    .circle {
        border-radius: 50%;
        background: linear-gradient(135deg, transparent 20%, #325FAB);
        position: absolute;
    }

        .circle.one {
            width: 130px;
            height: 130px;
            top: 130px;
            right: -40px;
        }

        .circle.two {
            width: 80px;
            height: 80px;
            top: 10px;
            right: 30px;
        }

    .contact-form:before {
        content: "";
        position: absolute;
        width: 26px;
        height: 26px;
        background-color: #325FAB;
        transform: rotate(45deg);
        top: 50px;
        left: -13px;
    }

    form {
        padding: 2.3rem 2.2rem;
        z-index: 10;
        overflow: hidden;
        position: relative;
    }

    .title {
        color: #fff;
        font-weight: 500;
        font-size: 1.5rem;
        line-height: 1;
        margin-bottom: 0.7rem;
    }

    .input-container {
        position: relative;
        margin: 1rem 0;
    }

    .input {
        width: 100%;
        outline: none;
        border: 2px solid #fafafa;
        background: none;
        padding: 0.6rem 1.2rem;
        color: #fff;
        font-weight: 500;
        font-size: 1.5rem;
        letter-spacing: 0.5px;
        border-radius: 5px;
        transition: 0.3s;
    }

    textarea.input {
        padding: 0.8rem 1.2rem;
        min-height: 150px;
        border-radius: 5px;
        resize: none;
        overflow-y: auto;
    }

    .input-container label {
        position: absolute;
        top: 50%;
        left: 15px;
        transform: translateY(-50%);
        padding: 0 0.4rem;
        color: #fafafa;
        font-size: 0.9rem;
        font-weight: 400;
        pointer-events: none;
        z-index: 1000;
        transition: 0.5s;
    }

    .input-container.textarea label {
        top: 1rem;
        transform: translateY(0);
    }

    .btn-custom {
        background-color: #325FAB;
        color: #fff; /* Text color */
        border: none; /* Remove default border */
    }

        /* Button hover effect with a lighter shade */
        .btn-custom:hover {
            background-color: #4B7BCC; /* Lighter shade of #325FAB */
            color: #fff; /* Ensure text color remains white on hover */
        }
    /* .btn {
        padding: 0.6rem 1.3rem;
        background-color: #fff;
        border: 2px solid #fafafa;
        font-size: 0.95rem;
        color: #325FAB;
        line-height: 1;
        border-radius: 5px;
        outline: none;
        cursor: pointer;
        transition: 0.3s;
        margin: 0;
        width: 100%;
    }

        .btn:hover {
            background-color: transparent;
            color: #fff;
        }*/

    .input-container span {
        position: absolute;
        top: 0;
        left: 25px;
        transform: translateY(-50%);
        font-size: 0.8rem;
        padding: 0 0.4rem;
        color: transparent;
        pointer-events: none;
        z-index: 500;
    }

        .input-container span:before,
        .input-container span:after {
            content: "";
            position: absolute;
            width: 10%;
            opacity: 0;
            transition: 0.3s;
            height: 5px;
            background-color: #325FAB;
            top: 50%;
            transform: translateY(-50%);
        }

        .input-container span:before {
            left: 50%;
        }

        .input-container span:after {
            right: 50%;
        }

    .input-container.focus label {
        top: 0;
        transform: translateY(-50%);
        left: 25px;
        font-size: 0.8rem;
    }

    .input-container.focus span:before,
    .input-container.focus span:after {
        width: 50%;
        opacity: 1;
    }

    .contact-info {
        padding: 2.3rem 2.2rem;
        position: relative;
    }

        .contact-info .title {
            color: #1abc9c;
        }

    .text {
        color: #333;
        margin: 1.5rem 0 2rem 0;
    }

    .information {
        display: flex;
        color: #555;
        margin: 0.7rem 0;
        align-items: center;
        font-size: 1.5rem;
        font-weight: 700;
    }

        .information i {
            color: #325FAB;
        }

    .icon {
        width: 28px;
        margin-right: 0.7rem;
    }

    .social-media {
        padding: 2rem 0 0 0;
    }

        .social-media p {
            color: #333;
        }

    .social-icons {
        display: flex;
        margin-top: 0.5rem;
    }

        .social-icons a {
            width: 35px;
            height: 35px;
            border-radius: 5px;
            background: linear-gradient(45deg, #1abc9c, #149279);
            color: #fff;
            text-align: center;
            line-height: 35px;
            margin-right: 0.5rem;
            transition: 0.3s;
        }

            .social-icons a:hover {
                transform: scale(1.05);
            }

    .contact-info:before {
        content: "";
        position: absolute;
        width: 110px;
        height: 100px;
        border: 22px solid #325FAB;
        border-radius: 50%;
        bottom: -77px;
        right: 50px;
        opacity: 0.3;
    }

    .big-circle {
        position: absolute;
        width: 500px;
        height: 500px;
        border-radius: 50%;
        background: linear-gradient(to bottom, #1cd4af, #325FAB);
        bottom: 50%;
        right: 50%;
        transform: translate(-40%, 38%);
    }

        .big-circle:after {
            content: "";
            position: absolute;
            width: 360px;
            height: 360px;
            background-color: #325FAB;
            border-radius: 50%;
            top: calc(50% - 180px);
            left: calc(50% - 180px);
        }

    .square {
        position: absolute;
        height: 400px;
        top: 50%;
        left: 50%;
        transform: translate(181%, 11%);
        opacity: 0.2;
    }

    @@media (max-width: 850px) {
        .form {
            grid-template-columns: 1fr;
        }

        .contact-info:before {
            bottom: initial;
            top: -75px;
            right: 65px;
            transform: scale(0.95);
        }

        .contact-form:before {
            top: -13px;
            left: initial;
            right: 70px;
        }

        .square {
            transform: translate(140%, 43%);
            height: 350px;
        }

        .big-circle {
            bottom: 75%;
            transform: scale(0.9) translate(-40%, 30%);
            right: 50%;
        }

        .text {
            margin: 1rem 0 1.5rem 0;
        }

        .social-media {
            padding: 1.5rem 0 0 0;
        }
    }

    @@media (max-width: 480px) {
        .container {
            padding: 1.5rem;
        }

        .contact-info:before {
            display: none;
        }

        .square,
        .big-circle {
            display: none;
        }

        form,
        .contact-info {
            padding: 1.7rem 1.6rem;
        }

        .text,
        .information,
        .social-media p {
            font-size: 0.8rem;
        }

        .title {
            font-size: 1.15rem;
        }

        .social-icons a {
            width: 30px;
            height: 30px;
            line-height: 30px;
        }

        .icon {
            width: 23px;
        }

        .input {
            padding: 0.45rem 1.2rem;
        }

        .btn {
            padding: 0.45rem 1.2rem;
        }
    }

    .fab-btn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        background-color: #003B59;
        color: white;
        border-radius: 50%;
        border: none;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
        font-size: 24px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        z-index: 1000;
    }

        .fab-btn:hover {
            background: transparent; /* Make background transparent on hover */
            border: 1px solid #003B59; /* Thicker border with dark color on hover */
            color: #003B59; /* Dark font color on hover */
            transform: scale(1.05); /* Slightly scale up the card on hover */
            -webkit-box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
        }

    .delete-widget-btn:hover {
        background-color: #ff1a1a; /* Darker red on hover */
        transform: scale(1.1); /* Slightly increase the size on hover */
        cursor: pointer; /* Change cursor to pointer on hover */
    }

    .Edit-btn,
    .delete-btn {
        transition: background-color 0.3s, color 0.3s, transform 0.3s;
    }

        .Edit-btn:hover,
        .delete-btn:hover {
            color: #fff; /* White text color on hover */
            transform: scale(1.1); /* Slightly scale up the button on hover */
            border: 1px solid transparent; /* Optional: border to highlight the button */
        }

    #SavePOWidgets {
        background: #003B59; /* Make background transparent on hover */
        color: white; /* Dark font color on hover */
        transform: scale(1.05); /* Slightly scale up the card on hover */
    }

        #SavePOWidgets:hover {
            background: transparent; /* Make background transparent on hover */
            border: 1px solid #003B59; /* Thicker border with dark color on hover */
            color: #003B59; /* Dark font color on hover */
            transform: scale(1.05); /* Slightly scale up the card on hover */
            -webkit-box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
        }


    #yesButton {
        background: #003B59; /* Make background transparent on hover */
        color: white; /* Dark font color on hover */
        transform: scale(1.05); /* Slightly scale up the card on hover */
    }

        #yesButton:hover {
            background: transparent; /* Make background transparent on hover */
            border: 1px solid #003B59; /* Thicker border with dark color on hover */
            color: #003B59; /* Dark font color on hover */
            transform: scale(1.05); /* Slightly scale up the card on hover */
            -webkit-box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
        }

    .modal-dialog {
        margin: 30px auto;
    }

    .ModalHeaderColor {
        background-color: #D6EFE8;
        color: #003B59
    }

    #btnClose {
        background-color: whitesmoke; /* Make background transparent on hover */
        color: #003B59; /* Dark font color on hover */
        transform: scale(1.05); /* Slightly scale up the card on hover */
    }

        #btnClose:hover {
            border: 1px solid #003B59; /* Thicker border with dark color on hover */
            color: #003B59; /* Dark font color on hover */
            transform: scale(1.05); /* Slightly scale up the card on hover */
            -webkit-box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
        }

    .lblText {
        color: #003B59;
    }
</style>


<div class="box-title">
    @if (HttpContext.Current.Session["CONN_TYPE"].ToString() == "Prod")
    {
        <div style="color: #003B59; font-size: 20px; padding-top: 0px; float: left; margin-left: 10px; font-weight:bold">Welcome back @HttpContext.Current.Session["UserName"].ToString().</div>
    }
    else if (HttpContext.Current.Session["CONN_TYPE"].ToString() == "Pilot")
    {
        <div style="color: #003B59; font-size: 20px; padding-top: 0px; float: left; margin-left: 10px; font-weight: bold">Welcome back @HttpContext.Current.Session["UserName"].ToString().</div>
    }
    else
    {
        <div style="color: #003B59; font-size: 20px; padding-top: 0px; float: left; margin-left: 10px; font-weight: bold">Welcome back @HttpContext.Current.Session["UserName"].</div>
    }
</div>
<div class="container-fluid" style="margin:40px;">
    <div class="row">

        @*<div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 CardPad">
                <div class="card bg-c-blue order-card" id="AllOpenCard">
                    <div class="card-block">
                        <h6 class="m-b-20 text-bold">Idle PO</h6>
                        <h2 class="text-right"><i class="fa fa-bullhorn f-left"></i><span id="lblAllOpen"></span></h2>
                        <p class="m-b-0"> Purchase order has been issued but not yet fulfilled or completed.</p>
                    </div>
                </div>
            </div>*@



        <div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 CardPad">
            <div class="card bg-c-green order-card" id="CardPending">
                <div class="card-block">
                    <h6 class="m-b-20 text-bold">In Process PO</h6>
                    <h2 class="text-right"><i class="fa fa-hourglass f-left"></i><span id="lblPending"></span></h2>
                    <p class="m-b-0"> Purchase order has been generated and is now underway or completed shortly.</p>
                </div>
            </div>
        </div>

        <div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 CardPad">
            <div class="card bg-c-yellow order-card" id="CardLate">
                <div class="card-block">
                    <h6 class="m-b-20 text-bold">Late PO</h6>
                    <h2 class="text-right"><i class="fa fa-calendar f-left"></i><span id="lblLate"></span></h2>
                    <p class="m-b-0"> Purchase order that has not been fulfilled within the agreed-upon timeframe.</p>
                </div>
            </div>
        </div>

        <div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 CardPad">
            <div class="card bg-c-green order-card" id="CardEarly">
                <div class="card-block">
                    <h6 class="m-b-20 text-bold">Early PO</h6>
                    <h2 class="text-right"><i class="fa fa-hourglass f-left"></i><span id="lblArrived"></span></h2>
                    <p class="m-b-0"> Purchase order fulfilled or expected to arrive ahead of the scheduled delivery date.</p>
                </div>
            </div>
        </div>

        <div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 CardPad">
            <div class="card bg-c-pink order-card" id="CardUpdate">
                <div class="card-block">
                    <h6 class="m-b-20 text-bold">Completed PO</h6>
                    <h2 class="text-right"><i class="fa fa-envelope f-left"></i><span id="lblUpdate"></span></h2>
                    <p class="m-b-0"> Purchase Order that Ordered quantity matches the arrived quantity.</p>
                </div>
            </div>
        </div>
    </div>

    @if (Model.dtWidgetPO.Rows.Count > 0)
    {
        <div class="container-fluid">
            <div class="row">
                @foreach (System.Data.DataRow row in Model.dtWidgetPO.Rows)
                {
                    // Extract title, count, and id from the row
                    var title = row["WidgetTitle"].ToString();
                    var desc = row["WidgetDesc"].ToString();
                    var count = row["Count"].ToString();
                    var id = row["Id"].ToString();
                    var token = row["Token"].ToString();

                    // Generate card HTML with data-id attribute for delete button
                    <div class="col-sm-6 col-md-4 col-lg-3 col-xl-2 mb-3 CardPad">
                        <div class="card order-card clickable-card" id="WidgetCard" data-id="@id" data-title="@title"  style="position: relative; border-top: 4px solid #003B59;">
                            <div class="card-block" style="padding: 10px;">
                                <!-- Button container to handle settings and delete buttons -->
                                <div style="position: absolute; top: 5px; right: 10px; display: flex; gap: 2px;">
                                    <!-- Settings button -->
                                    <a class="btn btn-light Edit-btn" id="WidgetEdit" data-id="@id" style="padding: 2px 5px; font-size: 5px;">
            <i class="fa fa-edit" style="color: #003B59"></i>
        </a>
                                    <!-- Delete button -->
                                   

                                    <a class="btn btn-light delete-btn" id="WidgetDelete" data-id="@id" style="padding: 2px 5px; font-size: 5px;">
                                        <i class="fa fa-trash" style="color: #003B59"></i>
                                    </a>
                                </div>

                                <h6 class="m-b-10 text-bold" style="font-size: 14px; color: #003B59 ">@title</h6>
                                <h4 class="text-right" style="font-size: 24px; color: #003B59 ">
                                    <i class="fa fa-file-alt f-left"></i><span>@count</span>
                                </h4>
                                <p class="m-b-0" style="font-size: 14px; color: #003B59 ">@desc</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }






    <!-- Floating Plus Button -->
    <button class="fab-btn" data-toggle="tooltip" data-placement="top" title="Add Tile" onclick="openAddWidgetModal()">
        <i class="fa fa-plus"></i>
    </button>

</div>

<!-- Modal -->
<div class="modal fade" id="widgetModal" tabindex="-1" role="dialog" aria-labelledby="widgetModalLabel">
    <div class="modal-dialog centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #D6EFE8; color: #003B59;">
                <h5 class="modal-title" id="widgetModalLabel"><strong id="WidgetModalTitle"></strong></h5>

            </div>
            <div class="modal-body" style="height:450px">
                <div class="form-group">
                    <label class="lblText" for="noOfDays">Title:</label>
                    <input type="text" class="form-control" id="txtWidgetTitle" placeholder="Enter Title" required>
                </div>
                <div class="form-group">
                    <label class="lblText" for="noOfDays">Last number of due day(s):</label>
                    <input type="number" class="form-control" id="txtNoOfDays" min="0" step="1" placeholder="Enter due days" required>
                </div>

                <!-- PO's Dropdown with Search and Checkboxes -->
                <div class="form-group">
                    <label class="lblText" for="POLst">Purchase Order:</label>
                    <select id="POLst" class="form-control" multiple="multiple" required>
                        <!-- Options should be dynamically populated -->
                    </select>
                </div>
                <div class="form-group">
                    <label class="lblText" for="widgetDescription">Description:</label>
                    <textarea class="form-control" id="txtWidgetDescription" placeholder="Enter Widget Description" required></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnClose" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="SavePOWidgets" type="button" class="btn btn-primary"></button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Test -->
@*<div class="modal fade" id="widgetModal" tabindex="-1" role="dialog" aria-labelledby="widgetModalLabel">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content d-flex flex-column justify-content-center">

            <div class="modal-header justify-content-center" style="background-color: #D6EFE8; color: #003B59;">
                <h4 class="modal-title" id="widgetModalLabel">
                    <strong id="WidgetModalTitle">Widget</strong>
                </h4>
            </div>

            <div class="modal-body text-center d-flex flex-column justify-content-center align-items-center flex-grow-1">
                <i class="glyphicon glyphicon-hourglass" style="font-size: 48px; color: #003B59;margin-top:10px"></i>
                <h4 class="mt-3">This feature is coming soon</h4>
                <p class="text-muted">We're working hard to bring this functionality to you.</p>
            </div>

            <div class="modal-footer justify-content-center">
                <button id="btnClose" type="button" class="btn btn-outline-secondary" data-dismiss="modal">Close</button>
            </div>

        </div>
    </div>
</div>*@




<!-- Modal Yes or NO -->
<div id="confirmationModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xs" role="document">
        <div class="modal-content">
            <div class="custom-modal-header ModalHeaderColor" style="padding-bottom:5px">
                <h5 class="custom-modal-title lbl_ ModalLabelColor" style="padding-top:12px; padding-left:6px">Confirmation</h5>

            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-xs-12" style="background-color:#F5F5F5">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label id="confirmationMessage">Are you sure you want to delete this Widget?</label>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="yesButton" type="button" class="btn btn-primary" data-dismiss="modal">Yes</button>
                <button id="noButton" type="button" class="btn btn-secondary" data-dismiss="modal">No</button>

            </div>
        </div>
    </div>
</div>







<div id="resize_widget" class="modal fade" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-gray">
                <h4 class="modal-title">Resize Widget</h4>
            </div>
            <div class="modal-body">
                <input type="hidden" id="hdn_widget_id_resize" />
                <div class="form-group">
                    <label>Title</label>
                    <input type="text" id="txt_widget_title_resize" class="form-control" disabled>
                </div>
                <div class="form-group">
                    <label>Size</label>
                    <select class="form-control" id="dd_widget_size_resize"></select>
                </div>
            </div>
            <div class="modal-footer" style="color:gray; font-size:11px; text-align:left; ">
                <div class="pull-right">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="resize_widget()">Resize</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>


<div id="add_widget" class="modal fade" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-gray">
                <h4 class="modal-title">Add Widget</h4>

            </div>
            <div class="modal-body">
                <input type="hidden" id="hdn_widget_id" />
                <input type="hidden" id="hdn_widget_type" />
                <input type="hidden" id="hdn_widget_min_size" />
                <input type="hidden" id="hdn_widget_max_size" />
                <div class="form-group">
                    <label>Title</label>
                    <input type="text" id="txt_widget_title" class="form-control" disabled>
                </div>
                <div class="form-group">
                    <label>Size</label>
                    <select class="form-control" id="dd_widget_size"></select>
                </div>
            </div>
            <div class="modal-footer" style="color:gray; font-size:11px; text-align:left; ">
                <div class="pull-right">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="add_widget_in_grid()">Add Widget</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="changePasswordModal" tabindex="-1" role="dialog" aria-labelledby="changePasswordModalLabel" style="padding-top:50px" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">Change Temporary Password</h5>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="oldPassword">Old Password</label>
                        <input type="password" class="form-control" id="oldPassword" placeholder="Enter new Old Password">

                    </div>
                    <div class="form-group">
                        <label for="newPassword">New Password</label>
                        <input type="password" class="form-control" id="newPassword" placeholder="Enter New Password">
                        <input type="checkbox" onclick="togglePassword('newPassword')"> Show Password
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm New Password">
                        <input type="checkbox" onclick="togglePassword('confirmPassword')"> Show Password
                    </div>
                </form>
            </div>
            <div class="modal-footer" style="text-align:center">
                <button type="button" class="btn btn-custom" id="saveChangesButton">Save changes</button>
            </div>
        </div>
    </div>
</div>

@*<button id="btn_widget" style="position:fixed; "><span class="fa fa-plus fa-lg white"></span></button>*@
@*<button id="btn_dashboard_edit" onclick="EditDashboard()" style="position:fixed;"><span class="fa fa-pencil-alt fa-lg white"></span></button>
    <button id="btn_dashboard_save" onclick="SaveDashboard()" style="position:fixed; margin-bottom:-60px;"><span class="fa fa-check fa-lg white"></span></button>*@
<!--<div id="dashboard_footer">-->
@*Designed by: Muhammad Yousuf @@WinIT*@
<!--</div>-->
<!-- Main content -->

<script src="~/Scripts/Message.js"></script>

<!-- Moment.js (required by DateTimePicker) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>


<script type="text/javascript">
    var color_count = 0;
    var gridster;
    var deletedWidgets = "";
    var count_widget_colors = ['bg-aqua', 'bg-green', 'bg-yellow', 'bg-red'];
    var lstPODetails;
    @*var _lstPO = @Html.Raw(Json.Encode(Model.lstPO));*@




    function initializeMultiselect() {
        $('#POLst').multiselect({
            includeSelectAllOption: true,
            selectAllText: 'All',
            buttonWidth: '100%',
            maxHeight: 170,
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            filterPlaceholder: 'Search',
            numberDisplayed: 4,
            templates: {
                ul: '<ul class="multiselect-container dropdown-menu" style="-ms-overflow-x: hidden; -ms-overflow-y: auto; max-height: 300px; width:100%;"></ul>'
            },
            buttonText: function (options, select) {
                if (options.length == 0) {
                    return 'select from list';
                } else if (options.length > this.numberDisplayed) {
                    return options.length + ' selected';
                } else {
                    var selected = [];
                    options.each(function () {
                        selected.push($(this).text());
                    });
                    return selected.join(', ');
                }
            }
        });

        $('#POLst').multiselect('selectAll', false);
        $("#POLst").multiselect('updateButtonText');
    }

    // Initialize the multiselect on document ready
    initializeMultiselect();

    //gridster = $("#dashboard_grid ul").gridster({
    //    widget_base_dimensions: [170, 170],
    //    widget_margins: [15, 15],
    //    max_cols: 8,
    //    max_rows:100,
    //    avoid_overlapped_widgets: true,

    //    shift_widgets_down: false,
    //    shift_widgets_up: false,
    //    //shift_larger_widgets_down: true,
    //    //shift_widgets_up: false,
    //    //collision: {
    //    //    wait_for_mouseup: true
    //    //},
    //    serialize_params: function ($w, wgd) {
    //        return {
    //            WidgetId: $($w).attr('id'),
    //            WidgetPositionY: wgd.col,
    //            WidgetPositionX: wgd.row,
    //            WidgetSizeX: wgd.size_x,
    //            WidgetSizeY: wgd.size_y,
    //        };
    //    },


    //}).data('gridster');

    //GetWidgetList();
    //GetEmployeeWidgets();
    //enable_disable('PAGE_LOAD');
    function togglePassword(fieldId) {
        var field = document.getElementById(fieldId);
        if (field.type === "password") {
            field.type = "text";
        } else {
            field.type = "password";
        }
    }
    $('#txtNoOfDays').on('change', function () {
        const noOfDays = $(this).val();
        loadPOList(noOfDays);
    });


    var WidgetDeleteId = null;
    var WidgetEditId = null;
    loadData();
    function loadData() {


        $.ajax({

            cache: false,
            type: 'GET',
            url: '/Dashboard/GetWidgetData',
            data: {

            },
            datatype: JSON,
            success: function (data) {
                var AllOpen = data.AllOpen;
                var Pending = data.Pending;
                var Late = data.Late;
                var update = data.Update;
                var Arrived = data.Arrived;
                var isTempKey = data.IsTempKey;

                $("#lblAllOpen").text(AllOpen);
                $("#lblArrived").text(Arrived);

                $('#lblPending').text(Pending);
                $('#lblLate').text(Late);
                $('#lblUpdate').text(update);

                if (isTempKey == "True") {
                    $('.modal-backdrop').remove();
                    $('#changePasswordModal').modal('show');
                }

                 },
            onerror: function (r) { r },
            failure: function (r) { r }
        });

    }

    function openAddWidgetModal() {

        $('#WidgetModalTitle').text('Add Widget');
        $('#SavePOWidgets').text('Add');
        $('#widgetModal').modal('show');
        $('#txtWidgetTitle').val('');
        $('#txtWidgetDescription').val('');
        $('#txtNoOfDays').val('');
        $('#POLst').empty(); // Assuming this is a multi-select dropdown
        $('#POLst').multiselect('rebuild');
        WidgetEditId = null;
        WidgetDeleteId = null;
    }

    $('#AllOpenCard').click(function () {
         OpenPage('\\NewPO\\GetPO?POStatus=All Open');
    });
    $('#CardEarly').click(function () {
        OpenPage('\\NewPO\\GetPO?POStatus=Arrived');
    });

    $('#CardPending').click(function () {
        // Handle click event for card 2
        OpenPage('\\NewPO\\GetPO?POStatus=Pending');
    });

    $('#CardLate').click(function () {
        // Handle click event for card 3
        OpenPage('\\NewPO\\GetPO?POStatus=Late');
    });

    $('#CardUpdate').click(function () {
        OpenPage('\\NewPO\\SupplierUpdate?POStatus=Update');
    });


    $('#saveChangesButton').click(function () {


        var OldPassword = $('#oldPassword').val();
        var NewPassword = $('#newPassword').val();
        var ConfirmPassword = $('#confirmPassword').val();

        if (NewPassword != ConfirmPassword) {
            MsgToast("Oops!", "New Password and Confirm Password not matched!", "error");
            return;
        }

        $.ajax({

            cache: false,
            type: 'GET',
            url: '/Home/CreatePassword',
            data: {
                OldPassword: OldPassword,
                NewPassword: NewPassword,


            },
            datatype: JSON,
            success: function (data) {
                if (data == "Updated") {
                    $('#changePasswordModal').modal('hide');
                    MsgToast("Success!", "Password has been changed!", "success");
                }
                else {
                    MsgToast("Oops!", "Password Not Matched!", "error");
                }
            },
            onerror: function (r) { r },
            failure: function (r) { r }
        });

    });

    function loadPOList(noOfDays, callback) {
        $.ajax({
            cache: false,
            type: 'GET',
            url: '/Dashboard/GetPOList',
            data: { noOfDays: noOfDays },
            dataType: 'json',
            success: function (data) {
                lstPODetails = data.lstPODetails;

                // Clear options
                $('#POLst').empty();

                // Append all POs
                $.each(lstPODetails, function (index, item) {
                    $('#POLst').append(new Option(item.POHeader_PONum, item.POHeader_PONum));
                });

                // Reinitialize multiselect
                $('#POLst').multiselect('destroy');
                initializeMultiselect();

                // Step 1: Select all by default
                $('#POLst').multiselect('selectAll', false);

                // Step 2: Uncheck those which exist in BuyerPOHeader
                // Step 2: Disable those which exist in BuyerPOHeader
                $.each(lstPODetails, function (index, item) {
                    if (item.IsExist == 1) {
                        $("#POLst option[value='" + item.POHeader_PONum + "']").prop("disabled", true);
                    }
                });

                // Refresh multiselect after disabling
                $('#POLst').multiselect('refresh');


                $('#POLst').multiselect('updateButtonText');

                if (callback) callback();
            },

            error: function (r) {
                console.error("Error occurred:", r);
            }
        });
    }



    $('#SavePOWidgets').click(function () {

        var WIdgetTitle = $('#txtWidgetTitle').val();
        var WidgetDesc = $('#txtWidgetDescription').val();
        var NoOfDays = $('#txtNoOfDays').val();
        var POListId = $('#POLst').val(); // Assuming this is a multi-select dropdown
        var widgetDateTime = $('#ScheduleTime').val();

        if (WIdgetTitle.trim() == "") {
            MsgToast("Oops!", "Please Enter Widget Title!", "error");
            return false;
        }
        if (WidgetDesc.trim() == "") {
            MsgToast("Oops!", "Please Enter Widget Description!", "error");
            return false;
        }

        if (NoOfDays.trim() == "") {
            MsgToast("Oops!", "Please Enter Number Of Days!", "error");
            return false;
        }
        //if (widgetDateTime.trim() == "") {
        //    MsgToast("Oops!", "Please Select Schedule Date Time", "error");
        //    return false;
        //}
        if (POListId.length == 0) {
            MsgToast("Oops!", "Please select PO!", "error");
            return false;
        }
        if (WidgetEditId == '' || WidgetEditId == null) {
            $.ajax({
                cache: false,
                type: 'POST',
                url: '/Dashboard/SavePOWidgets',
                data: {
                    WIdgetTitle: WIdgetTitle,
                    WidgetDesc: WidgetDesc,
                    NoOfDays: NoOfDays,
                    widgetDateTime: widgetDateTime,
                    POListId: POListId,
                    items: JSON.stringify(lstPODetails)
                },
                traditional: true, // Allows serialization of array in query string format
                datatype: JSON,
                success: function (data) {

                    if (data.Result === "Save") {
                        $('#widgetModal').modal('hide');
                        window.location.reload();


                    } else {
                        MsgToast("Oops!", "Something went wrong!", "error");
                    }
                },
                onerror: function (r) { r },
                failure: function (r) { r }
            });
        }
        else {


            $.ajax({
                cache: false,
                type: 'POST',
                url: '/Dashboard/EditPOWidgets',
                data: {
                    WidgetEditId: WidgetEditId,
                    WIdgetTitle: WIdgetTitle,
                    WidgetDesc: WidgetDesc,
                    NoOfDays: NoOfDays,
                    POListId: POListId // POListId should be an array
                },
                traditional: true, // Allows serialization of array in query string format
                datatype: JSON,
                success: function (data) {
                    $('#txtNoOfDays').val(data.Count).trigger('change');

                    if (data.Result === "Save") {
                        $('#widgetModal').modal('hide');
                        window.location.reload();


                    } else {
                        MsgToast("Oops!", "Something went wrong!", "error");
                    }
                },
                onerror: function (r) { r },
                failure: function (r) { r }
            });
        }

    });





    // Event delegation for dynamically added elements
    $(document).on('click', '#WidgetCard', function (e) {
        e.preventDefault();
        var WidgetId = $(this).data('id');
        var title = $(this).data('title');
        var encodedTitle = encodeURIComponent(title);
        OpenPage('\\NewPO\\Index?POStatus=Widget&PO=&WidgetId=' + WidgetId + '&WidgetTitle=' + encodedTitle);
    });

    $(document).on('click', '#WidgetEdit', function (e) {
        e.preventDefault();
        e.stopPropagation(); // Prevent event from bubbling up to #WidgetCard
         WidgetEditId = $(this).data('id');
        $('#widgetModal').modal('show');
        $('#WidgetModalTitle').text('Edit Widget');

        $('#SavePOWidgets').text('Save');


        $.ajax({
            cache: false,
            type: 'GET',
            url: '/Dashboard/GetPOWidgetsById',
            data: {
                WidgetEditId: WidgetEditId
            },
            traditional: true,
            datatype: JSON,
            success: function (data) {
                $('#txtWidgetTitle').val(data.WidgetTitle);
                $('#txtWidgetDescription').val(data.WidgetDesc);
                $('#txtNoOfDays').val(data.Days);


                let dbDate = data.ScheduleDateTime;

                // Convert it to a JavaScript Date object
                let date = new Date(dbDate);

                // Format the date to ISO 8601 format for datetime-local input
                let formattedDate = date.toISOString().slice(0, 16);

                // Set the formatted date to the datetime-local input
                $('#ScheduleTime').val(formattedDate);
               // $('#editScheduleTime').val(new Date(data.ScheduleDateTime).toISOString().slice(0, 16));

                //// ✅ Load PO List based on NoOfDays, then select old POs
                //loadPOList(data.Count, function () {
                //    var poArray = data.WidgetPO.split(',');
                //    $('#POLst').val(poArray);
                //    $('#POLst').multiselect('refresh');
                //});

                //// Set NoOfDays and trigger change to reload PO list
                //$('#txtNoOfDays').val(data.Count).trigger('change');

                const noOfDays = data.Days;
                loadPOList(noOfDays);

                // If using Bootstrap Multiselect or any plugin, refresh it
                $('#POLst').multiselect('rebuild'); // Optional: Only if using Bootstrap Multiselect
                $('#POLst').multiselect('destroy');
                initializeMultiselect();
                // Optionally select all items by default
                $('#POLst').multiselect('selectAll', false);
                $('#POLst').multiselect('updateButtonText');
            },
            onerror: function (r) { r },
            failure: function (r) { r }
        });
    });

    $(document).on('click', '#WidgetDelete', function (e) {
        e.preventDefault();
        e.stopPropagation(); // Prevent event from bubbling up to #WidgetCard
        WidgetDeleteId = $(this).data('id');
        $('#confirmationModal').modal('show');
    });

    $("#yesButton").click(function () {
        



        $.ajax({
            cache: false,
            type: 'GET',
            url: '/Dashboard/DeletePOWidgets',
            data: {
                WidgetDeleteId: WidgetDeleteId

            },
            traditional: true, // Allows serialization of array in query string format
            datatype: JSON,
            success: function (data) {

                if (data.Result === "Save") {
                    $('#confirmationModal').modal('hide');
                    window.location.reload();


                } else {
                    MsgToast("Oops!", "Something went wrong!", "error");
                }
            },
            onerror: function (r) { r },
            failure: function (r) { r }
        });

    });

    @*function GetWidgetList()
     {
        $.ajax(
         {
             type: "GET",
             url: '@Url.Action("GetWidgetList")', // Controller/View
             contentType: "application/json; charset=utf-8",
             async:false,
                success: function (data) {

                 //IF MODEL HAS ERRORS OR VALIDATION MESSAGES
                 if (data.IsValid == false) {
                     alert('error');
                     return;
                 }

                 //AFTER MODELSTATE IS VALID
                 var str;
                 $.each(data.lst_widgets, function (i, row) {
                     str = '<li id="y' + row.WidgetId + '"  class="">';
                     str += '<div class="row pad-3">';
                     str += '<div class="col-xs-3 col-md-1">';
                     str += '<button class="bg-light-blue" type="button" style=" display: inline-block;cursor: pointer;border: 2px solid #666;box-sizing: border-box;height:28px;"><i class="fa ' + row.WidgetIcon +'"></i></button>';
                     str += '</div>';
                     str += '<div class="col col-md-10">';
                     str += ' <span style="padding: 12px; font-size:19px;">' + row.WidgetTitle + '</span>';
                     str += '</div>';
                     str += '<div class="col-xs-9 col-md-1">';
                     str += '<span><button id = "btn_add_x' + row.WidgetId + '"  data-toggle = "modal" data-target = "#add_widget" onclick = "config_widget(\'' + row.WidgetId + '\',\'' + row.WidgetTitle + '\',\'' + row.WidgetType + '\', \'' + row.WidgetMinSize + '\',\'' + row.WidgetMaxSize + '\')" type = "button" class="btn btn-default btn-sm bg-light-blue fixed-width-button" style="float:right;" > Add </button ></span >';
                     str += '</div>';
                     str += '</div>';
                     str += '';


                     //str += '<div class="row">';
                     //str += ' <div class="col-xs-12">';
                     //str += '  <span class="info-box-icon bg-light-blue"><i style="margin-top:23px;" class="fa '+ row.WidgetIcon +'"></i></span>';
                     //str += '<div class="info-box-content">';
                     //str += '<div class="row">';
                     //str += '<div class="col-xs-8">';
                     //str += ' <span class="info-box-number">' + row.WidgetTitle + '</span>';
                     //str += ' <p style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis;" data-toggle="tooltip">' + row.WidgetDesc + '</p>';
                     //str += '</div>'
                     //str += '<div class="col-xs-4">';
                     //str += '<span><button id = "btn_add_x' + row.WidgetId + '" data-toggle = "modal" data-target = "#add_widget" onclick = "config_widget(\'' + row.WidgetId + '\',\'' + row.WidgetTitle + '\',\'' + row.WidgetType + '\', \'' + row.WidgetMinSize + '\',\'' + row.WidgetMaxSize + '\')" type = "button" class="btn btn-default btn-sm bg-light-blue" style="float:right;" > ADD</button ></span > ';
                     //str += '</div>';
                     //str += '</div>';
                     //str += '</div>';
                     //str += '</div>';
                     //str += ' </div>';
                     str += '<hr style="margin: 0px" />';
                     str += ' </li>';
                     $('#widget_list .list-group').append(str);
                 });
             },
             error: function (data) {
                 alert(data);
             }
         });
    }
    function GetEmployeeWidgets()
       {
        var emp_widgets_params = [];
        $.ajax(
         {
             type: "GET",
             url: '@Url.Action("GetEmployeeWidgets")', // Controller/View
                contentType: "application/json; charset=utf-8",
                async:false,
             success: function (data) {

                 //IF MODEL HAS ERRORS OR VALIDATION MESSAGES
                 if (data.IsValid == false) {
                     alert('error');
                     return;
                 }

                 //AFTER MODELSTATE IS VALID
                 var str;

                 gridster.remove_all_widgets();
                 $.each(data.lstWidgetsEmployee, function (i, row) {
                     var str = make_widget(row.WidgetId, row.WidgetTitle, row.WidgetType, row.WidgetSizeY, row.WidgetMinSize, row.WidgetMaxSize);
                     gridster.add_widget(str, row.WidgetSizeX, row.WidgetSizeY, row.WidgetPositionY, row.WidgetPositionX);
                     var newRemoveButtonHtml = '<button id="btn_add_x' + row.WidgetId + '" onclick="remove_widget(\'' + row.WidgetId + '\', \'' + row.WidgetTitle + '\', \'' + row.WidgetType + '\', \'' + row.WidgetMinSize + '\', \'' + row.WidgetMaxSize + '\')" type="button" class="btn btn-default btn-sm bg-red fixed-width-button" style="float:right;"> Remove </button>';
                     $("#btn_add_x" + row.WidgetId).replaceWith(newRemoveButtonHtml);

                     emp_widgets_params.push(
                         {
                             widget_id: row.WidgetId,
                             widget_type: row.WidgetType
                         });
                 });
             },
             error: function (data) {
                 alert(data);
             }
            });

           $.each(emp_widgets_params, function () {
               load_widget(this.widget_id, this.widget_type)
           });

    }
    function enable_disable(mode)
    {

        if (mode == 'PAGE_LOAD') {
            $('#btn_dashboard_save').hide();
            $('#btn_widget').hide();
            $('#btn_dashboard_edit').prop("disabled", false);
            $(".config_buttons").hide();
            gridster.disable();
        }
        else if (mode == 'EDIT') {
            $('#btn_dashboard_save').show();
            $('#btn_widget').show();
            $('#btn_dashboard_edit').hide();
            $('#background').addClass("edit_background");
            $("#btn_widget > span").removeClass("fa-minus");
            $("#btn_widget> span").addClass("fa-plus");
            $("#widget_list_toggle").show();
            $(".config_buttons").show();
            gridster.enable();
        }
        else if (mode == 'SAVE')
        {
            $('#btn_widget').hide();
            $('#btn_dashboard_save').hide();
            $('#btn_dashboard_edit').show();
            $("#widget_list_toggle").hide();
            $(".config_buttons").hide();
            $('#background').removeClass("edit_background");
            $("#btn_widget > span").removeClass("fa-minus");
            $("#btn_widget > span").addClass("fa-plus");
            gridster.disable();
        }
    }*@

    //function get_widget_sizes(min_size, max_size)
    //{

    //    var res = min_size.split(":");
    //    var minX = res[0];
    //    var minY = res[1];
    //    res = max_size.split(":");
    //    var maxX = res[0];
    //    var maxY = res[1];
    //    var str;
    //    for (var i = minX; i <= maxX; i++) {
    //        for (var j = minY; j <= maxY; j++) {
    //            str += '<option value = "' + i + ':' + j + '">' + i + ' X ' + j + '</option>';
    //        }
    //    }
    //    return str;
    //}

    //function config_widget(widget_id, title, type, min_size, max_size) {
    //    $('#hdn_widget_id').val(widget_id);
    //    $('#hdn_widget_type').val(type);
    //    $('#txt_widget_title').val(title);
    //    $('#hdn_widget_min_size').val(min_size);
    //    $('#hdn_widget_max_size').val(max_size);

    //    //dd_widget_size
    //    $("#dd_widget_size").empty();
    //    $("#dd_widget_size").append(get_widget_sizes(min_size, max_size));
    //    //var newRemoveButtonHtml = '<button id="btn_add_x' + widget_id + '" onclick="remove_widget(\'' + widget_id + '\', \'' + title + '\', \'' + type + '\', \'' + min_size + '\', \'' + max_size + '\')" type="button" class="btn btn-default btn-sm bg-red fixed-width-button" style="float:right;"> Remove </button>';
    //    //$("#btn_add_x" + widget_id).replaceWith(newRemoveButtonHtml);



    //}
    //function config_widget_resize(widget_id, title, min_size, max_size) {

    //    var widget_size = $("#x" + widget_id + "").attr('data-sizey') + ":" + $("#x" + widget_id + "").attr('data-sizex');
    //    $('#hdn_widget_id_resize').val(widget_id);
    //    $('#txt_widget_title_resize').val(title);

    //    $('#dd_widget_size_resize').empty();
    //    $('#dd_widget_size_resize').append(get_widget_sizes(min_size, max_size));
    //    $('#dd_widget_size_resize').val(widget_size);
    //}
    //function resize_widget() {


    //    var widget_id = $('#hdn_widget_id_resize').val();
    //    var widget_size = $('#dd_widget_size_resize').val();
    //    var res = widget_size.split(":");
    //    var sizeY = res[0];
    //    var sizeX = res[1];

    //    gridster.resize_widget($('#x' + widget_id + ''), sizeX, sizeY);

    //    var height = (sizeY * 170) - 26;
    //    $("#x" + widget_id + " > .box > .box-body").height(height);
    //    $("#t" + widget_id + "_wrapper .dataTables_scrollBody").height(height - 34);
    //  ToggleDataList(true)
    //}

    //function remove_widget(widget_id, title, type, min_size, max_size) {

    //    var index = $("#x" + widget_id + "").index();
    //    gridster.remove_widget($('.gridster li').eq(index));
    //    var newAddButtonHtml = '<button id="btn_add_x' + widget_id + '" data-toggle = "modal" data-target = "#add_widget" onclick="config_widget(\'' + widget_id + '\', \'' + title + '\', \'' + type + '\', \'' + min_size + '\', \'' + max_size + '\')" type="button" class="btn btn-default btn-sm bg-light-blue fixed-width-button" style="float:right;"> Add </button>';
    //    $("#btn_add_x" + widget_id).replaceWith(newAddButtonHtml);
    //    $("#x" + widget_id + "").remove();
    //}

    //function add_widget_in_grid() {

    //    var widget_id = $('#hdn_widget_id').val();
    //    var widget_title = $('#txt_widget_title').val();
    //    var widget_size = $('#dd_widget_size').val();
    //    var widget_type = $('#hdn_widget_type').val();
    //    var widget_sizes = $('#dd_widget_size').html();
    //    var widget_min_size = $('#hdn_widget_min_size').val();
    //    var widget_max_size = $('#hdn_widget_max_size').val();
    //    var res = widget_size.split(":");
    //    var sizeY = res[0]; //2
    //    var sizeX = res[1]; //4

    //    var str = make_widget(widget_id, widget_title, widget_type, sizeY, widget_min_size, widget_max_size);

    //    gridster.add_widget(str, sizeX, sizeY);

    //    load_widget(widget_id, widget_type);
    //    var newRemoveButtonHtml = '<button id="btn_add_x' + widget_id + '" onclick="remove_widget(\'' + widget_id + '\', \'' + widget_title + '\', \'' + widget_type + '\', \'' + widget_min_size + '\', \'' + widget_max_size + '\')" type="button" class="btn btn-default btn-sm bg-red fixed-width-button" style="float:right;"> Remove </button>';
    //    $("#btn_add_x" + widget_id).replaceWith(newRemoveButtonHtml);
    //}

    //function load_widget(widget_id, type)
    //{
    //    $.ajax({
    //        url: '/Dashboard/LoadWidget',
    //        data: {
    //            widget_id: widget_id,
    //            widget_type: type
    //        },
    //        success: function (data) {
    //            populate_widget(widget_id, type, data);
    //        }
    //    })
    //}

    //function populate_widget(widget_id, type, data) {
    //    // alert('populate_widget')
    //    var str;

    //    if (type.toLowerCase() == 'count') {

    //        var count = data.widget_count_count;
    //        var URL = data.widget_count_report_URL;
    //        var desc = data.widget_desc;
    //        var bg = data.widget_count_bg;
    //        str = '<div class="small-box ' + bg + '" style="height:inherit;" >';
    //        str += '<div class="inner">';
    //        if (count == 0) {
    //            str += '<p style="font-size:2vw; font-weight:bold; color:white;">' + count + '</p>';
    //        } else {
    //            str += '<p style="font-size:2vw; font-weight:bold; color:white;">' + thousands_separators(count) + '</p>';
    //        }

    //        str += '<p class="font_style" style="font-size:14px;  width:70%; word-break:break-word; text-transform:capitalize;">' + desc + '</p>';
    //        str += '</div>';
    //        str += '<div class="icon" style="top:5px;">';
    //        str += ' <i class="fa fa-coins"></i>';
    //        str += ' </div>';



    //        //if (URL == null || URL.length <= 0)
    //        //    URL = '#';
    //        //else
    //        //    URL = 'open_report(\'' + URL + '\')';

    //        // str += '<a onclick="' + URL + ';"  style="color:#fff;">Open Report <i class="fa fa-arrow-circle-right"></i></a>';
    //        if (count == 0) {
    //        }
    //        else {


    //            str += '<div class="small-box-footer" style="position:absolute; width:100%; bottom:0px;" >';
    //            str += '<a id="my" onclick = "return  OpenPage(\'' + URL + '\')" target="_blank"  style = "color:#fff;"> Open <i class= "fa fa-arrow-circle-right"></i></a>';

    //            str += '</div>';

    //            str += '</div>';


    //        }
    //        $("#dashboard_grid > ul > #x" + widget_id + " > .box > .box-body").append(str);
    //        color_count += 1;
    //        if (color_count >= count_widget_colors.length)
    //            color_count = 0;
    //    }

    //    else if (type.toLowerCase() == 'list') {
    //        var lst = data.lst_widget_list;
    //        str = '<ul id="list" style="height:inherit; overflow-y:auto; " class="font_style">';
    //        $.each(lst, function (i, row) {
    //            str += '<li style="padding:3px;">';
    //            str += row[0];
    //            str += '</li>';
    //        });
    //        str += '</ul>';
    //        $("#dashboard_grid > ul > #x" + widget_id + " > .box > .box-body").append(str);
    //        $("#dashboard_grid > ul > #x" + widget_id + " > .box > .box-body").addClass("bg-red");
    //    }
    //    else if (type.toLowerCase() == 'hyperlist') {
    //        var lst = data.lst_widget_hyperlist;
    //        str = '<ul id="hyperlist" style="height:inherit; overflow-y:auto; " class="font_style">';

    //        $.each(lst, function (i, row) {
    //            str += '<li style="padding:3px;">';
    //            str += '<a onclick="open_report(\'' + row[0] + '\')">' + row[1] + '</a>';
    //            str += '</li>';
    //        });
    //        str += '</ul>';
    //        $("#dashboard_grid > ul > #x" + widget_id + " > .box > .box-body").append(str);
    //    }
    //    else if (type.toLowerCase() == 'table') {
    //        var col_count = data.widget_table_cols_count;

    //        str = '<table id="t' + widget_id + '" class="table table-hover font_style">';
    //        str += '<thead>';
    //        str += '<tr>';
    //        for (var i = 0; i < col_count; i++) {
    //            str += '<th></th>';
    //        }
    //        str += '</tr>';
    //        str += '</thead>';
    //        str += '<tbody>';

    //        str += "</tbody>";
    //        str += '</table>';

    //        $("#dashboard_grid > ul > #x" + widget_id + " > .box > .box-body").append(str);

    //        var sizeY = $("#x" + widget_id + " > .box > .box-body").height();
    //        var height = sizeY - 34;
    //        var columnDefs = [];

    //        columnDefs = JSON.parse(data.widget_table_column_format);


    //        MakeMeBabyGrid('t' + widget_id, data.lst_widget_table, height, columnDefs);
    //    }
    //    else if (type.toLowerCase() == 'chart') {
    //        var count = data.widget_count_count;
    //        str = '<div class="chart" style="height:inherit;"> ';
    //        str += ' <canvas  id="c' + widget_id + '" style="height:inherit;" ></canvas>';
    //        str += '</div>';
    //        str += '<div class="small-box-footer" style="position:absolute; width:100%; bottom:5px; text-align:center" >';
    //        if (count == 0) {

    //        }
    //        else {

    //            str += '<a id="my" onclick = "return  OpenPage(\'' + '/WIP/GetWIP' + '\')" target="_blank"  style = "color:gray;"> Open Report <i class= "fa fa-arrow-circle-right"></i></a>';
    //        }
    //        str += '</div>';

    //        $("#dashboard_grid > ul > #x" + widget_id + " > .box > .box-body").append(str);
    //        var ctx = document.getElementById('c' + widget_id + '').getContext('2d');
    //        var sizeY = $("#x" + widget_id + " > .box > .box-body").height();
    //        var sizeX = $("#x" + widget_id + " > .box > .box-body").width();
    //        $("#txt").val(JSON.stringify(data.chart_data));
    //        draw_me_chart(ctx, data.chart_data, data.chart_title, 'horizontalBar');
    //    }
    //    else if (type.toLowerCase() == 'count_group') {
    //        var lst = data.lst_widget_group_counts;

    //        str = '';
    //        $.each(lst, function (i, row) {
    //            var title = row[0];
    //            var URL = row[1];
    //            var count_type = row[2];
    //            var back_color = row[3];
    //            var count = row[4];



    //            var dollar_sign = '';
    //            if (count_type == "cost")
    //                dollar_sign = "$";
    //            str += '<div class="row" style="margin-top:10px;">';
    //            str += '<div class="col-md-3" style="margin-right:9px; width:100%;"   >';

    //            str += '  <div class="info-box-content ' + back_color + ' " style="margin:0px;">';
    //            str += ' <span style="font-size:20px;" >' + title + ': </span>';
    //            str += ' <span  style="font-size:20px; font-weight:bold;"> ' + (dollar_sign) + (count) + '</span>';

    //            str += '<div class="small-box-footer" style="text-align:center; width:100%; margin-top:5px; " >';
    //            str += '<a onclick="open_report(\'' + URL + '\');"  style="color:white;">Open Report <i class="fa fa-arrow-circle-right"></i></a>';
    //            str += '<hr style = "margin:5px;"/>';
    //            str += '</div>';

    //            str += ' </div>';
    //            str += '</div>'; //column
    //            str += '</div>'; //row


    //            color_count += 1;
    //            if (color_count >= count_widget_colors.length)
    //                color_count = 0;

    //        });
    //        //str +='</div>' //row
    //        $("#dashboard_grid > ul > #x" + widget_id + " > .box > .box-body").append(str);
    //        $("#dashboard_grid > ul > #x" + widget_id + " > .box > .box-body").css("background-color", "grey");
    //    }
    //}


    //function make_widget(widget_id, title, type, sizeY, min_size, max_size)
    //{

    //    var height = (sizeY * 170) - 26;
    //    if (sizeY > 1)
    //     height += ((sizeY-1) * 15);

    //    var str = '<li id ="x' + widget_id + '" >';
    //    str += '  <div class="box box-default" style="  height:inherit;" >';
    //    str += ' <div style="height:26px;" class="bg-blue-gradient" >';
    //    str += ' <div class="widget_title pull-left" style="font-size:16px; font-weight:500; margin-top:4px; margin-left:4px; color:white; " >' + title + '</div>';
    //    str += ' <div class="pull-right">';
    //    if(min_size != max_size)
    //        str += '<button type="button" data-target="#resize_widget" data-toggle="modal" onclick="config_widget_resize(\'' + widget_id + '\',\'' + title + '\',\'' + min_size + '\',\'' + max_size + '\')" class="config_buttons"><i class="fa fa-wrench white"></i></button>';

    //    str += '<button id = "btn_add_x' + widget_id + '" type="button" onclick = "remove_widget(\'' + widget_id + '\',\'' + title + '\',\'' + type + '\', \'' + min_size + '\',\'' + max_size + '\')" class="config_buttons bg-red"><i class="fa fa-times white"></i></button>';
    //    str += ' </div>';
    //    str += ' </div>'; //Box Header Ends

    //    str += ' <div class="box-body" style="height:' + height +'px; border-left-color:gray;">';
    //    str += ' </div>';
    //    str += ' </div>';
    //    str += '</li>';

    //    return str;
    //}

    //function draw_me_chart(chartId, data, title, chartType) {
    //    var sum = 0;
    //    for (var i = 0; i < data.datasets[0].data.length; i++) {
    //        sum += parseInt(data.datasets[0].data[i]);
    //    }

    //    chartId.data = [];
    //    window.myBar = new Chart(chartId, {
    //        type: chartType,
    //        data: data,
    //        options: {
    //            responsive: true,
    //            //title: {
    //            //    display: true,
    //            //    text: title,
    //            //},
    //            tooltips: {
    //                mode: 'index',
    //                intersect: false,
    //                callbacks: { // for thousand seperator for tooltip on bar
    //                    label: function (tooltipItem, data) {
    //                        var tooltipValue = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
    //                        return thousands_separators(Math.round(tooltipValue));
    //                    }
    //                }
    //            },
    //            responsive: true,
    //            scales: {
    //                xAxes:  [{
    //                    ticks: {
    //                        beginAtZero: false,
    //                        stepSize: sum,
    //                        callback: function (value) {
    //                            var ranges = [
    //                                { divider: 1e6, suffix: 'M' },
    //                                { divider: 1e3, suffix: 'k' }
    //                            ];
    //                            function formatNumber(n) {
    //                                for (var i = 0; i < ranges.length; i++) {
    //                                    if (n >= ranges[i].divider) {
    //                                        return (n / ranges[i].divider).toString() + ranges[i].suffix;
    //                                    }
    //                                }
    //                                return n;
    //                            }
    //                            return '' + formatNumber(value);
    //                        }
    //                    }
    //                }],
    //                yAxes:   [{
    //                    stacked: false
    //                }]
    //            }
    //        }
    //    });
    //}


    @*function EditDashboard()
    {

        enable_disable('EDIT');

    }
    function SaveDashboard()
    {
        enable_disable('SAVE');
        AdjustWidgetList();

        var emp_widgets = gridster.serialize();
        if (emp_widgets == null)
        {
            return;
        }
          $.ajax(
         {
             type: "POST",
             url: '@Url.Action("SaveEmployeeWidgets")', // Controller/View
                  contentType: "application/json; charset=utf-8",
                  data: JSON.stringify(emp_widgets),
                  processData: false,
                  cache: false,
                  async: true,
             success: function (data) {

                 //IF MODEL HAS ERRORS OR VALIDATION MESSAGES
                 if (data.IsValid == false) {
                     alert('error');
                     return;
                 }
             },
             error: function (data) {
                 alert(data);
             }
         });
    }*@



    //function AdjustWidgetList()
    //{
    //    if ($("#dashboard_main_box").hasClass('toggled')) {
    //        $("#widget_list_toggle > span").removeClass("fa-minus");
    //        $("#widget_list_toggle > span").addClass("fa-plus");
    //        $("#dashboard_main_box").toggleClass("toggled");
    //    }
    //    else {
    //        //$("#widget_list_toggle > span").addClass("fa fa-minus fa-lg white");
    //    }

    //}

    //$("#widget_list_toggle").click(function (e) {
    //    e.preventDefault();
    //    if ($("#dashboard_main_box").hasClass('toggled')) {
    //        $("#widget_list_toggle > span").removeClass("fa-minus");
    //        $("#widget_list_toggle > span").addClass("fa-plus");
    //    }
    //    else {
    //            $("#widget_list_toggle > span").addClass("fa-minus");
    //            $("#widget_list_toggle > span").removeClass("fa-plus");
    //        }

    //    $("#dashboard_main_box").toggleClass("toggled");
    //});

    //$("#btn_widget").click(function (e) {
    //    e.preventDefault();
    //    if ($("#dashboard_main_box").hasClass('toggled')) {
    //        $("#btn_widget > span").removeClass("fa-minus");
    //        $("#btn_widget > span").addClass("fa-plus");
    //    }
    //    else {
    //        $("#btn_widget > span").addClass("fa-minus");
    //        $("#btn_widget > span").removeClass("fa-plus");
    //    }

    //    $("#dashboard_main_box").toggleClass("toggled");
    //});
    //$('#txt_search_widget').bind('keyup', function () {
    //    var searchString = $(this).val();
    //    $("#widget_list > div > ul > li").each(function (index, value) {

    //        currentName = $(value).text()
    //        if (currentName.toUpperCase().indexOf(searchString.toUpperCase()) > -1) {
    //            $(value).show();
    //        } else {
    //            $(value).hide();
    //        }
    //    });
    //});

    function open_report(url)
    {

        $.ajax(
            {
                type: "GET",
                url: '/Dashboard/GetURLInfo', // Controller/View
                contentType: "application/json; charset=utf-8",
                async: false,
                data: {
                    link: url
                },
                success: function (data) {

                    if (data.is_internal)
                        Navigate(data.target, url, data.code, data.title_short, data.designed_by);
                    else {
                        window.open(data.URL);
                    }
                },
                error: function (data) {
                    alert(data);
                }
            });
    }
</script>


