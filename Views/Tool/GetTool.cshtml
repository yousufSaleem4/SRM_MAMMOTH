@model PlusCP.Models.Tool
@{
    ViewBag.Title = "GetTool";
    Layout = null;

}
<link href="~/Content/css/message.css" rel="stylesheet" />
<link href="~/Content/css/jquery.dataTables.colResize.css" rel="stylesheet" />
<link href="~/Content/css/GetPO.css" rel="stylesheet" />

<style>
    /* Add User Modal */

    /* Refresh Button */
    .btn-refresh {
        background-color: #003B59 !important; /* Distinct orange color */
        color: white !important;
        border-radius: 30px !important;
        margin-left: 5px !important;
        height: 25px !important;
        padding: 0px 12px !important;
        border: 2px solid #003B59 !important;
        transition: all 0.3s ease-in-out;
    }

        .btn-refresh:hover {
            background-color: white !important;
            color: #003B59 !important;
            border: 2px solid #003B59 !important;
        }


    .RedColor {
        color: red;
    }

    .GreenColor {
        color: green;
    }

    .required:after {
        content: " *";
        color: red;
    }

    .datepicker td, th {
        text-align: center;
        padding: 8px 12px;
        font-size: 14px;
    }

    .Message {
        height: 200px;
        width: 500px
    }

    /*.custom-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #ccc;
    }

    .custom-modal-title {
        margin: 0;
    }

    .custom-modal-header .close {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        font-size: 1.5rem;
        line-height: 1;
    }*/

    .table.dataTable {
        font-family: "Segoe UI", "Roboto";
        clear: both;
        border-collapse: separate;
        border-spacing: 0;
        font-size: 16px;
    }

    .dataTables_wrapper,
    .dataTables_length,
    .dataTables_filter,
    .dataTables_info,
    .dataTables_paginate,
    table.dataTable thead th,
    table.dataTable tbody td {
        font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif !important;
    }

        .dataTables_wrapper .dataTables_paginate {
            text-align: left !important;
            float: none !important;
            display: flex;
            justify-content: left;
            font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif !important;
        }

            .dataTables_wrapper .dataTables_paginate .paginate_button {
                font-size: 15px !important; /* Increase font size */
                padding: 8px 12px; /* Increase button padding */
                color: #003B59 !important;
            }

        .dataTables_wrapper .dataTables_paginate {
            margin-left: 60px !important; /* Adjust this value as needed */
        }

            .dataTables_wrapper .dataTables_paginate .paginate_button i {
                font-size: 15px !important; /* Increase icon size */
                color: #003B59 !important;
            }

        .dataTables_wrapper .dataTables_info {
            font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif !important;
            font-size: 16px !important; /* Adjust size */
            color: #333 !important; /* Darker text */
            margin-left: 5px;
        }
    /* Change odd row background color */
    table.dataTable tbody tr:nth-child(odd) {
        background-color: #ECEDEF; /* Change to your desired color */
    }

    /* Change even row background color */
    table.dataTable tbody tr:nth-child(even) {
        background-color: #ffffff; /* Change to your desired color */
    }

    table.dataTable tbody tr.selected {
        background-color: #D6EFE8; /* Orange color */
        /*color: white;*/ /* Change text color if needed */
    }
    /* Search icon inside input */
    .search-icon {
        position: absolute;
        top: 50%;
        left: 8px;
        transform: translateY(-50%);
        color: darkgrey;
        font-size: 14px;
        pointer-events: none; /* Prevents clicking on the icon */
    }

    .search-container {
        position: relative;
        display: inline-block;
    }

    .txtSearch-frame {
        margin-top: 5px;
        height: 28px;
        width: 150px;
        border: none;
        color: #003B59;
        border: 2px solid #003B59 !important;
        width: 200px;
        padding-left: 30px; /* Space for the icon */
    }

    .pdf-icon {
        width: 30px;
        height: 30px;
        image-rendering: crisp-edges;
        image-rendering: -webkit-optimize-contrast;
    }

    .pad {
        padding-bottom: 15px;
        padding: 2px;
        padding-top: 10px;
    }

    .lblHeading {
        font-size: 19px;
        color: #003B59 !important;
    }

    .table-container {
        height: 200px; /* Set the desired fixed height */
        overflow-y: auto;
    }

    /*table > thead > tr > th {
        background-color: gray !important;
        color: white;
    }*/

    table.table thead th {
        background-color: #003B59 !important; /* Change to your desired color */
        color: white; /* Change to desired text color */
        font-size: 15px;
        font-family: 'Poppins', sans-serif;
        height: 40px;
    }

    table.table tbody td, lbl_ {
        /*background-color: white !important; /* Change to your desired color */
        font-size: 15px;
        color: #003B59 !important;
    }

    table.table tbody tr {
        height: 50px; /* Adjust height as needed */
    }

        /* Hover effect */
        table.table tbody tr:hover {
            background-color: #f5f5f5 !important; /* Light gray background on hover */
            transition: background-color 0.8s ease-in-out;
            cursor: pointer;
        }




    table th {
        /*padding: 1rem 0.5rem !important;*/
        border: 1px solid black;
        border-bottom: 1px solid black;
        /*padding: 8px;*/
        text-align: left;
    }

    table td {
        padding: 1rem 0.5rem !important;
        font-size: 15px !important;
        font-weight: 500 !important;
        vertical-align: middle;
    }

    table {
        border-collapse: separate;
        border-spacing: 0 10px; /* Adjust the second value to increase/decrease the vertical gap */
        width: 100%;
    }

        table.table-bordered.dataTable tbody th, table.table-bordered.dataTable tbody td {
            border-bottom-width: 1px;
        }




    .sticky-header th {
        position: sticky;
        top: 0;
        background-color: #f2f2f2;
    }



    .t-head {
        color: #023160;
    }

    /* Modal Styling */
    .modal-dialog {
        margin: 30px auto;
    }

        .modal-dialog.centered {
            display: flex;
            min-height: calc(100vh - 60px);
            align-content: stretch;
            flex-wrap: wrap;
            align-items: stretch;
            flex-direction: column;
            justify-content: center;
            width: 32%;
        }

    .box-header {
        background-color: #f8f9fc !important;
        color: #003B59 !important;
        border-bottom: 2px solid #f8f9fc;
        box-shadow: 0px 5px #ededed;
    }


    .btn-box-tool {
        color: #003B59 !important;
    }


    /*/Badges/*/

    .btn-badges {
        color: #003B59 !important;
        border-radius: 25px !important;
        margin-left: 5px !important;
        height: 25px !important;
        padding: 2px 12px !important;
    }

        .btn-badges:hover {
            background-color: #003B59 !important;
            color: white !important;
        }

            .btn-badges:hover .badge_light {
                background-color: white !important;
                color: #003B59 !important;
            }

    .badge_light {
        background-color: #003B59 !important;
        color: white !important;
    }

    .btn-badges-Sent {
        border-radius: 25px !important;
        height: 25px !important;
        width: 60px;
    }

    .selected {
        background-color: deepskyblue;
        color: black;
    }

    .ModalHeaderColor {
        background-color: #D6EFE8;
        color: #003B59
    }

    .ModalLabelColor {
        color: #003B59;
        text-align: center;
        font-weight: bold;
    }

    textarea {
        resize: none;
    }

    .password-wrapper {
        position: relative;
    }

        .password-wrapper .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #777;
            z-index: 2;
            border: none;
            background: none;
        }

        .password-wrapper input {
            padding-right: 35px; /* Leave space for the icon */
        }


    .dots-text {
        font-size: 22px;
        font-weight: bold;
        cursor: pointer;
        padding: 4px 8px;
        color: #333;
        user-select: none;
        transition: color 0.2s ease;
    }

        .dots-text:hover {
            color: #007bff;
        }

    .dropdown-custom {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        right: 0;
        top: calc(100% + 6px);
        background: #fff;
        min-width: 160px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        border-radius: 8px;
        z-index: 2147483647;
    }

    .dropdown-custom.show .dropdown-content {
        display: block;
    }

    .dropdown-content a {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 14px;
        color: #333;
        text-decoration: none;
        font-size: 14px;
        transition: background 0.2s ease;
    }

        .dropdown-content a:hover {
            background: #f0f0f0;
        }

        .dropdown-content a .icon {
            font-size: 16px;
            width: 20px;
            text-align: center;
        }
</style>

<div id="parent" class="container-fluid">
    <input id="rptCode" type="hidden" value="019" />
    <input id="rptTitle" class="lblHeading" type="hidden" value="@ViewBag.ReportTitle" />
    <div id="dataLists" class="box panel panel-default">
        <div class="box-header with-border">

            <h5 class="box-title"><strong>@ViewBag.ReportTitle  </strong><strong id="filterString"></strong></h5>
            <button id="GetToolList" class="btn btn-badges">
                Refresh
            </button>


            <div id="buttons" class="box-tools pull-right">

            </div>
        </div>

        <div class="box-body" id="lstP">
            <table id="lstGetTool" class="table table-bordered table-striped text-sm table-hover" style="width:100%">
                <thead class="sorted-asc">
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        @*    <th></th>
                            <th></th>*@
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                    </tr>
                </tfoot>
            </table>
        </div>

    </div>
</div>


<!-- Check-Out Modal -->
<div class="modal fade" id="checkOutModal" tabindex="-1" role="dialog" aria-labelledby="checkOutLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            <div class="modal-header ModalHeaderColor">
                <h5 class="modal-title ModalLabelColor">Tool Check-Out</h5>
            </div>

            <div class="modal-body">
                <form id="checkOutForm">
                    <input type="hidden" id="checkoutToolId" name="ToolId" />

                    <!-- Tool Name -->
                    <div class="form-group mb-2">
                        <label>Tool Name:</label>
                        <input type="text" class="form-control" id="checkoutToolDisplay" readonly />
                    </div>

                    <!-- Email and Password -->
                    <div class="form-row">
                        <div class="form-group col-md-6 mb-2">
                            <label for="checkOutEmail">Email:</label>
                            <input type="email" class="form-control" id="checkOutEmail" placeholder="Enter user email" required />
                        </div>

                        <div class="form-group col-md-6 mb-2">
                            <label for="checkOutPassword">Password:</label>
                            <div class="password-wrapper">
                                <input type="password" class="form-control" id="checkOutPassword" placeholder="Enter password" required />
                                <i class="fa fa-eye toggle-password" id="togglePasswordIcon"></i>
                            </div>
                        </div>
                    </div>

                    <!-- Tool Serials & Part Numbers (side-by-side) -->
                    <div class="form-row">
                        <div class="form-group col-md-6 mb-2">
                            <label class="lblText" for="checkOutSerials">Select Tool Serials:</label>
                            <select id="checkOutSerials" class="form-control" multiple="multiple" required></select>
                        </div>
                        <div class="form-group col-md-6 mb-2">
                            <label for="checkoutPartNos">Select Part Numbers:</label>
                            <select id="checkoutPartNos" class="form-control select2" multiple></select>
                        </div>
                    </div>

                    <!-- Expected Return Date & Condition Notes (side-by-side) -->
                    <div class="form-row">
                        <div class="form-group col-md-6 mb-2">
                            <label for="expectedReturnDate">Expected Return Date:</label>
                            <div class="input-group date" id="datepicker-container">
                                <input type="text" class="form-control" id="expectedReturnDate" name="ExpectedReturnDate" readonly>
                                <span class="input-group-addon">
                                    <i class="glyphicon glyphicon-calendar"></i>
                                </span>
                            </div>
                        </div>

                        <div class="form-group col-md-6 mb-2">
                            <label for="checkOutCondition">Condition Notes:</label>
                            <textarea class="form-control" id="checkOutCondition" name="Notes" rows="5" placeholder="Enter condition details..."></textarea>
                        </div>
                    </div>
                </form>
            </div>



            <div class="modal-footer py-2">
                <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Cancel</button>
                <button id="btnCheckout" type="submit" form="checkOutForm" class="btn btn-danger btn-sm">Confirm Check-Out</button>
            </div>

        </div>
    </div>
</div>



<!-- Check-In Modal -->
<div class="modal fade" id="checkInModal" tabindex="-1" role="dialog" aria-labelledby="checkInLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            <!-- Header -->
            <div class="modal-header ModalHeaderColor">
                <h5 class="modal-title ModalLabelColor">Tool Check-In</h5>
            </div>

            <!-- Body -->
            <div class="modal-body">
                <form id="checkInForm">

                    <input type="hidden" id="checkinToolId" name="ToolId" />

                    <!-- Tool Name -->
                    <div class="form-group mb-2">
                        <label>Tool Name:</label>
                        <input type="text" class="form-control" id="checkInToolName" readonly />
                    </div>

                    <!-- Email + Password -->
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="checkInEmail">Email:</label>
                            <input type="email" class="form-control" id="checkInEmail" placeholder="Enter user email" required />
                        </div>

                        <div class="form-group col-md-6 mb-2">
                            <label for="checkInPassword">Password:</label>
                            <div class="password-wrapper">
                                <input type="password" class="form-control" id="checkInPassword" placeholder="Enter password" required />
                                <i class="fa fa-eye toggle-password" id="toggleCheckInPasswordIcon"></i>
                            </div>
                        </div>

                    </div>

                    <!-- Tool Serials & Part Numbers (side-by-side) -->
                    <div class="form-row">
                        <div class="form-group col-md-6 mb-2">
                            <label class="lblText" for="checkInSerials">Select Tool Serials:</label>
                            <select id="checkInSerials" class="form-control" multiple="multiple" required></select>
                        </div>
                        <div class="form-group col-md-6 mb-2">
                            <label for="checkInPartNos">Select Part Numbers:</label>
                            <select id="checkInPartNos" class="form-control select2" multiple></select>
                        </div>
                    </div>

                    <!-- Notes -->
                    <div class="form-group">
                        <label for="checkInNotes">Check-In Notes:</label>
                        <textarea class="form-control" id="checkInCondition" rows="3" placeholder="Enter notes or condition updates..."></textarea>
                    </div>

                </form>
            </div>

            <!-- Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button id="btnCheckin" type="submit" form="checkInForm" class="btn btn-success">Confirm Check-In</button>
            </div>

        </div>
    </div>
</div>



<!-- Modal Transaction -->
<div id="TransactionModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg custom-modal-width" role="document">
        <div class="modal-content">
            <div class="custom-modal-header ModalHeaderColor">
                <h5 class="custom-modal-title lbl_ ModalLabelColor">Transaction History</h5>

            </div>
            <div class="modal-body">
                <div class="row">
                    <!-- Left side with green background color -->
                    <div class="row">
                        @*Left side (Table Grid)*@
                        <div class="col-md-12 table-container" style="height:400px">

                            <table id="transactionTable" class="table table-striped table-bordered">
                                <thead class="sticky-header">
                                    <tr>
                                        @* <th>Tool Id</th>*@
                                        <th>Tool Name</th>
                                        <th>Tool Serial No.</th>
                                        <th>Part No.</th>
                                        <th>Tran. Type</th>
                                        <th>Tran. Qty</th>
                                        <th>Tran. Date</th>
                                        <th>Expected Return Date</th>
                                        @*<th>User Id</th>*@
                                        <th>Username</th>
                                        <th>Notes</th>
                                    </tr>

                                </thead>
                                <tbody style="text-align:center"></tbody>
                            </table>

                        </div>
                    </div>
                </div>



            </div>
            <div class="modal-footer">
                <button id="btnTransactionPO" type="button" class="btn btnClose" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script src="~/Scripts/Message.js"></script>
<script>
    $(document).on('click', '.toggle-password', function () {
        const icon = $(this);
        const input = icon.siblings('input');

        const isPassword = input.attr('type') === 'password';
        input.attr('type', isPassword ? 'text' : 'password');
        icon.toggleClass('fa-eye fa-eye-slash');
    });



    ToggleDataList(false);

    LoadData();
    function LoadData() {
        $('#tblBody').empty();
        $('#lstData').DataTable().clear();
        $('#lstData').DataTable().destroy();
        var isSingleRow = false;

        $.ajax({

            cache: false,
            type: 'GET',
            url: '/Tool/GetToolList',
            data: {

            },
            datatype: JSON,
            success: function (data) {
                $('#filterString').append(data.filterString);
                $('#tblBody').empty();
                $('#lstData').DataTable().clear();
                $('#lstData').DataTable().destroy();

                if (!isSingleRow) {
                    var columnDef = [
                        { "data": "ToolId", "title": "Tool Id", "width": "50px", "className": "text-center", "visible": false },
                        { "data": "ToolName", "title": "Tool Name", "className": "text-center" },
                        { "data": "PartNum", "title": "Part No.", "className": "text-center" },

                        // Total Qty
                        { "data": "TotalQty", "title": "Total Qty", "className": "text-center" },

                        // Available Qty
                        {
                            "data": "AvailableQty", "title": "Available Qty", "className": "text-center",
                            "render": function (data, type, row) {
                                var d = data?.toString() || "0";
                                return (d === "" || d === "0") ? "0" : d;
                            }
                        },

                        // Current Status
                        { "data": "CurrentStatus", "title": "Current Status", "className": "text-center" },

                        // Is Consumable
                        {
                            "data": "IsConsumable", "title": "Is Consumable", "className": "text-center", "visible": false,
                            "render": function (data) {
                                return (data === true || data === "true" || data === 1) ? "1" : "0";
                            }
                        },

                        // Tool Transaction Link
                        {
                            "data": null, "title": "Tool Transaction", "className": "text-center",
                            "render": function (data, type, row) {
                                return `<a href="#" onclick="TransactionDtl('${row["ToolId"]}')">View</a>`;
                            }
                        },

                        // Check OUT / IN Buttons (always enabled for admin)
                        {
                            "data": null,
                            "title": "Check OUT/IN",
                            "className": "text-center",
                            "orderable": false,
                            "render": function (data, type, row) {
                                return `
        <div class="dropdown-custom">
            <span class="dots-text">⋯</span>
            <div class="dropdown-content">
                <a href="#" class="checkOutBtn"
                   data-ToolId="${row["ToolId"]}"
                   data-ToolName="${row["ToolName"]}">
                    <i class="fa fa-sign-out-alt icon text-danger"></i> Check OUT
                </a>
                <a href="#" class="checkInBtn"
                   data-ToolId="${row["ToolId"]}"
                   data-ToolName="${row["ToolName"]}">
                    <i class="fa fa-sign-in-alt icon text-success"></i> Check IN
                </a>
            </div>
        </div>`;
                            }
                        }

                    ];



                    ToggleDataList(true);

                    MakeDataGridForTraining('lstGetTool', data.lstGetTool, 0, columnDef, 'buttons', true, true, false, false);

                }
                if (data["ErrorMessage"] != null) {
                    $('.dataTables_empty > p').text(data["ErrorMessage"]);
                }
            },

            onerror: function (r) { r },
            failure: function (r) { r }
        });
    }

    $('#GetToolList').click(function () {
        OpenPage('/Tool/GetTool', 'Mohsin');
    });


    // 🔸 Toggle dropdown open/close
    $(document).off("click", ".dots-text").on("click", ".dots-text", function (e) {
        e.stopPropagation();
        let parent = $(this).closest(".dropdown-custom");
        $(".dropdown-custom").not(parent).removeClass("show");
        parent.toggleClass("show");
    });

    // Prevent closing when clicking inside
    $(document).off("click", ".dropdown-content").on("click", ".dropdown-content", function (e) {
        e.stopPropagation();
    });

    // Close dropdown when clicking anywhere else
    $(document).off("click.dropdownClose").on("click.dropdownClose", function () {
        $(".dropdown-custom").removeClass("show");
    });


    //MODAL Opening function
    $(document).on("click", ".checkOutBtn", function () {
    let toolId = $(this).data("toolid");
    let toolName = $(this).data("toolname");

    $("#checkoutToolId").val(toolId);
    $("#checkoutToolName").val(toolName);
    $("#checkoutToolDisplay").val(toolName);

    // Destroy + clear before refill
    $('#checkOutSerials').multiselect('destroy');
    $('#checkOutSerials').empty();

    // Fetch available serials
    $.get('@Url.Action("GetAvailableSerials", "Tool")', { toolId: toolId }, function (data) {
        $.each(data, function (index, item) {
            $('#checkOutSerials').append(new Option(item.ToolName, item.SerialId));
        });

        // Reinitialize
        initializeMultiselect("checkOutSerials");
        $('#checkOutSerials').multiselect('refresh');
    });

    // Fetch other dropdowns if needed
    loadCheckoutDropdowns(toolId);

    $("#checkOutModal").modal("show");
});


    $("#btnCheckout").click(function (e) {
    e.preventDefault();

    // Gather tool info
    let toolId = $("#checkoutToolId").val();
    let toolName = $("#checkoutToolDisplay").val() || $("#checkoutToolDisplay").text();

    // Gather selected serials and parts
    let selectedSerials = $("#checkOutSerials").val(); // IDs
    let selectedPartNos = $("#checkoutPartNos").val(); // IDs

    // Get display texts (Serial Numbers & Part Numbers)
    let selectedSerialTexts = $("#checkOutSerials option:selected").map(function () {
        return $(this).text().trim();
    }).get();

    let selectedPartNoTexts = $("#checkoutPartNos option:selected").map(function () {
        return $(this).text().trim();
    }).get();

    // Gather user credentials and other info
    let userEmail = $("#checkOutEmail").val();
    let userPassword = $("#checkOutPassword").val();
    let expectedReturnDate = $("#expectedReturnDate").val();
    let notes = $("#checkOutCondition").val();

    // Basic validation
    if (!userEmail || !userPassword) {
        MsgToast("Warning!", "Please enter your email and password.", "warning");
        return;
    }

    if ((!selectedSerials || selectedSerials.length === 0) && (!selectedPartNos || selectedPartNos.length === 0)) {
        MsgToast("Warning!", "Please select at least one tool serial or part number to check out.", "warning");
        return;
    }

    $.ajax({
        url: '@Url.Action("CheckOut","Tool")',
        type: 'POST',
        data: {
            toolId: toolId,
            toolName: toolName,
            serialIds: selectedSerials,
            serialNumbers: selectedSerialTexts,
            partIds: selectedPartNos,
            partNumbers: selectedPartNoTexts,
            expectedReturn: expectedReturnDate,
            notes: notes,
            email: userEmail,
            password: userPassword
        },
        traditional: true, // serialize arrays correctly
        success: function (response) {
            if (response.success) {
                MsgToast("Success!", response.message || "Tool checked out successfully", "success");
                $("#checkOutModal").modal("hide");
                LoadData();
            } else {
                MsgToast("Error!", response.message || "An error occurred during check-out.", "error");
            }
        },
        error: function () {
            MsgToast("Error!", "Error while processing Check-Out.", "error");
        }
    });
});


    //MODAL Opening function
    $(document).on("click", ".checkInBtn", function () {
    let toolId = $(this).data("toolid");
    let toolName = $(this).data("toolname");

    $("#checkinToolId").val(toolId);
    $("#checkInToolName").val(toolName);

    // 🔹 Serial dropdown
    $('#checkInSerials').multiselect('destroy');
    $('#checkInSerials').empty();

    $.get('@Url.Action("GetAllocatedToolSerials", "Tool")', { toolId: toolId }, function (data) {
        $.each(data, function (index, item) {
            $('#checkInSerials').append(new Option(item.SerialNumber, item.SerialId));
        });

        initializeMultiselect("checkInSerials");
        $('#checkInSerials').multiselect('refresh');
    });

    // 🔹 PartNo dropdown
    $('#checkInPartNos').multiselect('destroy');
    $('#checkInPartNos').empty();

    $.get('@Url.Action("GetAllocatedPartNos", "Tool")', { toolId: toolId }, function (data) {
        $.each(data, function (index, item) {
            $('#checkInPartNos').append(new Option(item.PartNo, item.PartId));
        });

        initializeMultiselect("checkInPartNos");
        $('#checkInPartNos').multiselect('refresh');
    });

    $("#checkInModal").modal("show");
});



    $("#btnCheckin").click(function (e) {
    e.preventDefault();

    //$("#checkinToolId").val(toolId);
    //$("#checkInToolName").val(toolName);

    let toolId = $("#checkinToolId").val();
    let toolName = $("#checkInToolName").val() || $("#checkInToolName").text();

    // Gather values
    let email = $("#checkInEmail").val();
    let password = $("#checkInPassword").val();
    let selectedSerials = $("#checkInSerials").val();     // array of serial IDs
    let selectedPartNos = $("#checkInPartNos").val();     // array of part IDs
    let notes = $("#checkInCondition").val();

    // Get visible text (serial numbers / part numbers)
    let selectedSerialTexts = $("#checkInSerials option:selected").map(function () {
        return $(this).text().trim();
    }).get();

    let selectedPartNoTexts = $("#checkInPartNos option:selected").map(function () {
        return $(this).text().trim();
    }).get();

    // Basic validation before making the request
    if (!email || !password) {
        MsgToast("Warning!", "Please enter your email and password.", "warning");
        return;
    }

    if ((!selectedSerials || selectedSerials.length === 0) && (!selectedPartNos || selectedPartNos.length === 0)) {
        MsgToast("Warning!", "Please select at least one tool serial or part number to check in.", "warning");
        return;
    }

    $.ajax({
        url: '@Url.Action("CheckIn", "Tool")',
        type: 'POST',
        data: {
            toolId: toolId,
            toolName: toolName,
            email: email,
            password: password,
            serialIds: selectedSerials,
            serialNo: selectedSerialTexts,
            partIds: selectedPartNos,
            partNo: selectedPartNoTexts,
            notes: notes
        },
        traditional: true, // ensures arrays serialize correctly
        success: function (response) {
            if (response.success) {
                MsgToast("Success!", response.message || "Check-In completed successfully.", "success");
                $("#checkInModal").modal("hide");
                LoadData();
            } else {
                MsgToast("Error!", response.message || "Unable to process check-in.", "error");
            }
        },
        error: function () {
            MsgToast("Error!", "Something went wrong while processing check-in.", "error");
        }
    });
});



    function loadCheckoutDropdowns(toolId) {

    // 🔹 Always destroy and clear before repopulating
    $('#checkoutPartNos').multiselect('destroy');
    $('#checkoutPartNos').empty();

    // 🔹 Load available part numbers via AJAX
    $.getJSON('@Url.Action("GetPartNo", "Tool")', { toolId: toolId }, function (lstPartNo) {

        if (lstPartNo && lstPartNo.length > 0) {
            $.each(lstPartNo, function (i, part) {
                $("#checkoutPartNos").append(
                    new Option(part.PartNo, part.PartId)
                );
            });
        } else {
            // Optional: show placeholder if no parts exist
            $("#checkoutPartNos").append(
                new Option("No part numbers available", "")
            );
        }

        // 🔹 Reinitialize multiselect after populating
        initializeMultiselect("checkoutPartNos");

        // 🔹 Refresh the UI
        $('#checkoutPartNos').multiselect('refresh');
        $('#checkoutPartNos').multiselect('updateButtonText');
    });
}

    function TransactionDtl(toolId) {
        $('#TransactionModal').modal('show');

        $.ajax({
            url: '/Tool/GetToolTransaction',
            cache: false,
            type: 'GET',
            data: {
                toolId: toolId,
            },
            datatype: JSON,
            success: function (data) {
                var lstToolTransaction = [];
                lstToolTransaction = data.lstToolTransaction;
                $('#transactionTable tbody').empty();
                // Iterate over selected rows and append to table
                for (var i = 0; i < lstToolTransaction.length; i++) {

                    var row = lstToolTransaction[i];

                    var rowDataHtml = '<tr>' +
                        //'<td>' + (row['ToolId'] ?? '') + '</td>' +
                        '<td>' + (row['ToolName'] ?? '-') + '</td>' +
                        '<td>' + (row['ToolSerialNumber'] ?? '-') + '</td>' +
                        '<td>' + (row['PartNo'] ?? '-') + '</td>' +
                        '<td>' + (row['TranType'] ?? '-') + '</td>' +
                        '<td class="text-center">' + (row['TranQty'] ?? '0') + '</td>' +
                        '<td>' + (row['TranDate'] ?? '-') + '</td>' +
                        '<td>' + (row['ExpectedReturnDate'] ?? '-') + '</td>' +
                        //'<td>' + (row['UserId'] ?? '-') + '</td>' +
                        '<td>' + (row['Username'] ?? '-') + '</td>' +
                        '<td>' + (row['Notes'] ?? '') + '</td>' +
                        '</tr>';

                    $('#transactionTable tbody').append(rowDataHtml);


                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                console.error('Error sending data:', error);
            }
        });

    }
    function MakeDataGridForTraining(tableId, data, tableHeight, columns, buttonId, search, isScrollX, footerFunction, isFramed, detailed, reportTitleId, rowSelection, lstHeight) {
        var isFooter = footerFunction === undefined || footerFunction === false ? false : true;
        var isFramed = isFramed === undefined || isFramed === false ? false : true;
        var isDetailed = detailed === undefined ? false : true;
        var reportTitle = '';

        if (reportTitleId === undefined)
            reportTitle = $('.box-title').text();
        else
            reportTitle = reportTitleId;

        var gridHeight = 0;

        isScrollX = isScrollX === undefined ? false : true;
        if (search === undefined) { search = true; }

        var gridButtonsClass = '';
        var gridSearchBoxClass = '';
        if (isDetailed === true) {
            gridButtonsClass = 'btn-header btn-box-tool';
            gridSearchBoxClass = 'bg-white';
            gridButtonSize = 30;
        }
        else {
            gridButtonsClass = 'btn-header btn-box-tool';
            gridSearchBoxClass = 'btn-box-tool bg-white txtSearch';
            gridButtonSize = 30;
        }

        var boxtool;
        if (search === true) {
            if (isFramed) {
                $('#trHeadSearch').empty();
                boxtool = `
        <div class="search-container">
            <i class="fa fa-search search-icon"></i>
            <input class="txtSearch-frame" id="txtFrameSearch" type="text" placeholder="Search..">
        </div>`;
                $('#trHeadSearch').append(boxtool);
            } else {
                $('#' + buttonId).empty();
                boxtool = `
        <div class="search-container">
            <i class="fa fa-search search-icon"></i>
            <input class="txtSearch-frame" id="txtFrameSearch${tableId}" type="text" placeholder="Search..">
        </div>`;
                $('#' + buttonId).append(boxtool);
            }
        }
        else {
            if (isFramed) {
                $('#trHeadSearch').empty();
                boxtool = '<input class="txtSearch-frame" id="txtFrameSearch" type="text" placeholder="Search.." style="padding-left: 10px !important;" >';
                $('#trHeadSearch').append(boxtool);
            }
            else {
                $('#' + buttonId).empty();

            }
        }

        var table = $('#' + tableId).DataTable({
            order: [],
            createdRow: rowSelection,
            data: data,
            columns: columns,
            paging: true,
            ordering: true,
            searching: search,
            deferRender: true,
            destroy: true,
            pagingType: 'full',
            pageLength: 20,
            scrollCollapse: false,
            scrollX: isScrollX,
            colReorder: true,
            orderClasses: false,
            deferRender: true,
            select: true,
            colResize: true,
            //scrollY: gridHeight,
            autoWidth: true,
            footerCallback: footerFunction,
            language: {
                emptyTable: "<p style=\"text-align:left;\">No record(s) found.</p>",
                zeroRecords: "<p style=\"text-align:left;\">No matching record(s) found</p>",
                info: "Showing _START_ to _END_ of _TOTAL_ entries",
                oPaginate: {
                    sNext: '<i class="fa fa-angle-right"></i>',
                    sPrevious: '<i class="fa fa-angle-left"></i>',
                    sFirst: '<i class="fa fa-angle-double-left"></i>',
                    sLast: '<i class="fa fa-angle-double-right"></i>'
                }
            },
            "dom": "<'row'<'col-sm-12'tr>>" +
                "<'row'<'col-sm-5 dataTables_info' i><'col-sm-6 ms-3 dataTables_paginate' p>>",
            buttons: [
                {
                    extend: 'copyHtml5',
                    footer: true,
                    text: '<span><span class="fa-stack"><i class="fa fa-circle fa-stack-2x" style="color: rgb(244, 164, 37);"></i><i class="fa fa-copy fa-stack-1x" style="color: white;"></i></span></span>',
                    titleAttr: 'Copy',
                    title: reportTitle,
                    filename: 'DataExport',
                    exportOptions: {
                        //columns: ':visible'
                        columns: 'th:not(.notexport)' // Excluding columns while exporting
                    }
                },
                {
                    extend: 'excelHtml5',
                    footer: true,
                    text: '<span><span class="fa-stack"><i class="fa fa-circle fa-stack-2x" style="color: rgb(0, 179, 98);"></i><i class="fa fa-file-excel fa-stack-1x" style="color: white;"></i></span></span>',
                    titleAttr: 'Export to excel',
                    title: reportTitle,
                    filename: 'DataExport', //Added By Tahir
                    exportOptions: {
                        //columns: ':visible'
                        columns: 'th:not(.notexport)'
                    }
                },
                {
                    extend: 'print',
                    footer: true,
                    text: '<span><span class="fa-stack"><i class="fa fa-circle fa-stack-2x" style="color: rgb(0, 204, 255);"></i><i class="fa fa-print fa-stack-1x" style="color: white;"></i></span></span>',
                    titleAttr: 'Print',
                    title: '',
                    messageTop: function () { return '<h4>' + reportTitle + '</h4>'; },
                    filename: 'DataExport',
                    exportOptions: {
                        // columns: ':visible'
                        columns: 'th:not(.notexport)'
                    }
                }
            ],
            select: true,
            //drawCallback: function () {
            //    $.get("/Tool/GetAllocationId", function (allocations) {
            //        allocations.forEach(function (alloc) {
            //            $(`.checkInBtn[data-ToolId='${alloc.ToolId}']`)
            //                .attr("data-allocationid", alloc.AllocationId);
            //        });
            //    });
            //}
        });
        table.buttons().container()
            .appendTo('#buttons');

        table.button(0).nodes().removeClass('btn btn-default buttons-copy buttons-html5');
        table.button(0).nodes().addClass(gridButtonsClass);

        table.button(1).nodes().removeClass('btn btn-default buttons-excel buttons-html5');
        table.button(1).nodes().addClass(gridButtonsClass);

        table.button(2).nodes().removeClass('btn btn-default buttons-excel buttons-html5');
        table.button(2).nodes().addClass(gridButtonsClass);

        var dsgndby = $('.modal-footer > #designedby ').html();

        if (dsgndby === "") {
            $('#designedBy').html($('.desgndBy').html());
        }

        var layoutHeader = $('nav').innerHeight();
        var cardHeader = $('.box-header').innerHeight();
        var tableHeader = $('.dataTables_scrollHead').innerHeight();
        var tableFooter = 0;
        var cardFooterH = 30;

        if (isFooter === true)
            tableFooter = $('.dataTables_scrollFoot').innerHeight();


        var parentHeight = $('#' + lstHeight).innerHeight();
        if (parentHeight == undefined)
            parentHeight = window.innerHeight;
        else
            parentHeight = $('#' + lstHeight).innerHeight();

        if (isFooter === true)
            tableFooter = $('#' + tableId + ' > tfoot').innerHeight();

        var browserHeight = parentHeight;
        if (tableHeight === 0) {
            if (layoutHeader === undefined)
                gridHeight = browserHeight - (cardHeader + tableHeader + tableFooter + cardFooterH);
            else
                gridHeight = browserHeight - (layoutHeader + cardHeader + tableHeader + tableFooter + cardFooterH);
        }
        else { gridHeight = tableHeight; }

        var topHeader = $('#topHeader').innerHeight();
        if (topHeader > 0)
            gridHeight = gridHeight - (topHeader + 1);

        gridHeight = gridHeight - 6;

        $('.dataTables_scrollBody').css('height', gridHeight + 'px');
        table.columns.adjust().draw();

        $('#txtFrameSearch' + tableId).on('keyup change', function () {
            table.search(this.value).draw();
        });
        $('.dataTables_filter').hide();
        table.columns.adjust().draw();


        //return table;
    }
    function MsgToast(msg, title, type) {

        toastr.options = {
            closeButton: true,
            debug: false,
            newestOnTop: false,
            progressBar: true,
            positionClass: 'toast-top-right',
            preventDuplicates: true,
            onclick: null
        };



        var $toast = toastr[type](title, msg); // Wire up an event handler to a button in the toast, if it exists
        $toastlast = $toast;

        if (typeof $toast === 'undefined') {
            return;
        }


    }
    function formatDecimal(data) {
        if (!data) return '';

        data = data.toString().trim();

        // If it's a whole number with .0 (e.g. "123.0") → "123"
        if (/^\d+\.0+$/.test(data)) {
            return data.replace(/\.0+$/, '');
        }

        // If it's numeric with decimals (e.g. "456.50") → "456.5"
        if (/^\d+\.\d+$/.test(data)) {
            return parseFloat(data).toString();
        }

        // Otherwise (alphanumeric or plain int), leave as-is
        return data;
    }
    function initializeMultiselect(dropdownId) {
        $('#' + dropdownId).multiselect({
            includeSelectAllOption: true,
            selectAllText: 'All',
            buttonWidth: '100%',
            maxHeight: 170,
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            filterPlaceholder: 'Search',
            numberDisplayed: 4,
            templates: {
                ul: '<ul class="multiselect-container dropdown-menu" style="-ms-overflow-x: hidden; -ms-overflow-y: auto; max-height: 300px; width:100%;"></ul>'
            },
            buttonText: function (options, select) {
                if (options.length == 0) {
                    return 'select from list';
                } else if (options.length > this.numberDisplayed) {
                    return options.length + ' selected';
                } else {
                    var selected = [];
                    options.each(function () {
                        selected.push($(this).text());
                    });
                    return selected.join(', ');
                }
            }
        });

        //$('#' + dropdownId).multiselect('selectAll', true);
        $('#' + dropdownId).multiselect('updateButtonText');
    }

    $(function () {
        $('#datepicker-container').datepicker({
            format: 'yyyy.mm.dd',
            autoclose: true,
            todayHighlight: true,
            startDate: new Date() // prevent selecting past dates
        }).datepicker('update', new Date()); // default = today
    });

</script>