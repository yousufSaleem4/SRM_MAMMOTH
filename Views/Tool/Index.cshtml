@model PlusCP.Models.Tool
@{
    ViewBag.Title = "Index";
    Layout = null;

}
<link href="~/Content/css/message.css" rel="stylesheet" />
<style>
    /* Add User Modal */
    #AddUserModal .modal-content {
        border: none;
        border-radius: 16px;
        box-shadow: 0 12px 32px rgba(0, 0, 0, .12);
        background: #fff;
        overflow: hidden;
    }

    /* Header */
    #AddUserModal .modal-header {
        padding: 14px 18px;
        border-bottom: none;
    }

    #AddUserModal .modal-title {
        font-weight: 700;
    }

    /* Body */
    #AddUserModal .modal-body {
        padding: 20px;
        background-color: #f9fafb;
    }

    #AddUserModal .ModalLabelColor {
        font-size: 15px;
        color: #374151;
        line-height: 1.6;
        font-weight: 600;
    }

    /* Form Controls */
    #AddUserModal .form-control {
        border-radius: 8px;
        border: 1px solid #d1d5db;
        padding: 8px 10px;
        font-size: 14px;
        box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
        transition: border-color 0.2s ease;
    }

        #AddUserModal .form-control:focus {
            border-color: #198754;
            outline: none;
            box-shadow: 0 0 0 2px rgba(25, 135, 84, 0.2);
        }

    /* Footer */
    #AddUserModal .modal-footer {
        border-top: 1px solid #e5e7eb;
        padding: 16px 22px;
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    /* Buttons */
    #AddUserModal .btn {
        border-radius: 10px;
        padding: 10px 18px;
        font-weight: 700;
        min-width: 110px;
    }

    .invite-btn {
        background-color: #28a745; /* Bootstrap success green */
        color: white;
        border: none;
        padding: 6px 14px;
        font-size: 13px;
        font-weight: 600;
        border-radius: 8px;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        transition: all 0.1s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
    }

        .invite-btn i {
            transition: transform 0.2s ease;
        }

        .invite-btn:hover {
            background-color: #218838; /* Darker green on hover */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transform: translateY(-1px);
        }

            .invite-btn:hover i {
                transform: translateX(3px);
            }

    /* Refresh Button */
    .btn-refresh {
        background-color: #003B59 !important; /* Distinct orange color */
        color: white !important;
        border-radius: 30px !important;
        margin-left: 5px !important;
        height: 25px !important;
        padding: 0px 12px !important;
        border: 2px solid #003B59 !important;
        transition: all 0.3s ease-in-out;
    }

        .btn-refresh:hover {
            background-color: white !important;
            color: #003B59 !important;
            border: 2px solid #003B59 !important;
        }


    .RedColor {
        color: red;
    }

    .GreenColor {
        color: green;
    }

    .required:after {
        content: " *";
        color: red;
    }

    .datepicker td, th {
        text-align: center;
        padding: 8px 12px;
        font-size: 14px;
    }

    .Message {
        height: 200px;
        width: 500px
    }

    .custom-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #ccc;
    }

    .custom-modal-title {
        margin: 0;
    }

    .custom-modal-header .close {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        font-size: 1.5rem;
        line-height: 1;
    }

    .table.dataTable {
        font-family: "Segoe UI", "Roboto";
        clear: both;
        border-collapse: separate;
        border-spacing: 0;
        font-size: 16px;
    }

    .dataTables_wrapper,
    .dataTables_length,
    .dataTables_filter,
    .dataTables_info,
    .dataTables_paginate,
    table.dataTable thead th,
    table.dataTable tbody td {
        font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif !important;
    }

        .dataTables_wrapper .dataTables_paginate {
            text-align: left !important;
            float: none !important;
            display: flex;
            justify-content: left;
            font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif !important;
        }

            .dataTables_wrapper .dataTables_paginate .paginate_button {
                font-size: 15px !important; /* Increase font size */
                padding: 8px 12px; /* Increase button padding */
                color: #003B59 !important;
            }

        .dataTables_wrapper .dataTables_paginate {
            margin-left: 60px !important; /* Adjust this value as needed */
        }

            .dataTables_wrapper .dataTables_paginate .paginate_button i {
                font-size: 15px !important; /* Increase icon size */
                color: #003B59 !important;
            }

        .dataTables_wrapper .dataTables_info {
            font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif !important;
            font-size: 16px !important; /* Adjust size */
            color: #333 !important; /* Darker text */
            margin-left: 5px;
        }
    /* Change odd row background color */
    table.dataTable tbody tr:nth-child(odd) {
        background-color: #ECEDEF; /* Change to your desired color */
    }

    /* Change even row background color */
    table.dataTable tbody tr:nth-child(even) {
        background-color: #ffffff; /* Change to your desired color */
    }

    table.dataTable tbody tr.selected {
        background-color: #D6EFE8; /* Orange color */
        /*color: white;*/ /* Change text color if needed */
    }
    /* Search icon inside input */
    .search-icon {
        position: absolute;
        top: 50%;
        left: 8px;
        transform: translateY(-50%);
        color: darkgrey;
        font-size: 14px;
        pointer-events: none; /* Prevents clicking on the icon */
    }

    .search-container {
        position: relative;
        display: inline-block;
    }

    .txtSearch-frame {
        margin-top: 5px;
        height: 28px;
        width: 150px;
        border: none;
        color: #003B59;
        border: 2px solid #003B59 !important;
        width: 200px;
        padding-left: 30px; /* Space for the icon */
    }

    .pdf-icon {
        width: 30px;
        height: 30px;
        image-rendering: crisp-edges;
        image-rendering: -webkit-optimize-contrast;
    }

    .pad {
        padding-bottom: 15px;
        padding: 2px;
        padding-top: 10px;
    }

    .lblHeading {
        font-size: 19px;
        color: #003B59 !important;
    }

    .table-container {
        height: 200px; /* Set the desired fixed height */
        overflow-y: auto;
    }

    /*table > thead > tr > th {
        background-color: gray !important;
        color: white;
    }*/

    table.table thead th {
        background-color: #003B59 !important; /* Change to your desired color */
        color: white; /* Change to desired text color */
        font-size: 15px;
        font-family: 'Poppins', sans-serif;
        height: 40px;
    }

    table.table tbody td, lbl_ {
        /*background-color: white !important; /* Change to your desired color */
        font-size: 15px;
        color: #003B59 !important;
    }

    table.table tbody tr {
        height: 50px; /* Adjust height as needed */
    }

        /* Hover effect */
        table.table tbody tr:hover {
            background-color: #f5f5f5 !important; /* Light gray background on hover */
            transition: background-color 0.8s ease-in-out;
            cursor: pointer;
        }




    table th {
        /*padding: 1rem 0.5rem !important;*/
        border: 1px solid black;
        border-bottom: 1px solid black;
        /*padding: 8px;*/
        text-align: left;
    }

    table td {
        padding: 1rem 0.5rem !important;
        font-size: 15px !important;
        font-weight: 500 !important;
        vertical-align: middle;
    }

    table {
        border-collapse: separate;
        border-spacing: 0 10px; /* Adjust the second value to increase/decrease the vertical gap */
        width: 100%;
    }

        table.table-bordered.dataTable tbody th, table.table-bordered.dataTable tbody td {
            border-bottom-width: 1px;
        }




    .sticky-header th {
        position: sticky;
        top: 0;
        background-color: #f2f2f2;
    }



    .t-head {
        color: #023160;
    }

    /* Modal Styling */
    .modal-dialog {
        margin: 30px auto;
    }

        .modal-dialog.centered {
            display: flex;
            min-height: calc(100vh - 60px);
            align-content: stretch;
            flex-wrap: wrap;
            align-items: stretch;
            flex-direction: column;
            justify-content: center;
            width: 32%;
        }

    .box-header {
        background-color: #f8f9fc !important;
        color: #003B59 !important;
        border-bottom: 2px solid #f8f9fc;
        box-shadow: 0px 5px #ededed;
    }


    .btn-box-tool {
        color: #003B59 !important;
    }


    /*/Badges/*/

    .btn-badges {
        color: #003B59 !important;
        border-radius: 25px !important;
        margin-left: 5px !important;
        height: 25px !important;
        padding: 2px 12px !important;
    }

        .btn-badges:hover {
            background-color: #003B59 !important;
            color: white !important;
        }

            .btn-badges:hover .badge_light {
                background-color: white !important;
                color: #003B59 !important;
            }

    .badge_light {
        background-color: #003B59 !important;
        color: white !important;
    }

    .btn-badges-Sent {
        border-radius: 25px !important;
        height: 25px !important;
        width: 60px;
    }

    .selected {
        background-color: deepskyblue;
        color: black;
    }

    .ModalHeaderColor {
        background-color: white;
        color: #003B59
    }

    .ModalLabelColor {
        color: #003B59;
    }

    .btn-hover-save {
        background-color: #003B59; /* Default background color */
        border-color: #003B59; /* Default border color */
        color: #fff; /* Default text color */
    }

        .btn-hover-save:hover {
            background-color: transparent; /* Make background transparent on hover */
            border-color: #003B59; /* Dark border color on hover */
            color: #003B59; /* Dark font color on hover */
        }

    .btnClose {
        background-color: whitesmoke; /* Make background transparent on hover */
        color: #003B59; /* Dark font color on hover */
        transform: scale(1.05); /* Slightly scale up the card on hover */
    }

        .btnClose:hover {
            border: 1px solid #003B59; /* Thicker border with dark color on hover */
            color: #003B59; /* Dark font color on hover */
            transform: scale(1.05); /* Slightly scale up the card on hover */
            -webkit-box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
        }



    .status-active,
    .status-pending,
    .status-received {
        color: white;
        padding: 5px 8px;
        border-radius: 4px;
        display: inline-block;
        transition: background-color 0.3s ease, color 0.3s ease;
        cursor: pointer;
    }

    .status-active {
        background-color: #007bff; /* Bootstrap primary blue */
    }

        .status-active:hover {
            background-color: #0056b3; /* darker blue */
            color: #fff;
        }

    .status-pending {
        background-color: #fd7e14; /* Bootstrap orange */
    }

        .status-pending:hover {
            background-color: #e8590c; /* darker orange */
            color: #fff;
        }

    .status-received {
        background-color: #28a745; /* Bootstrap green */
    }

        .status-received:hover {
            background-color: #1e7e34; /* darker green */
            color: #fff;
        }

    .status-rejected {
        background-color: red; /* Bootstrap green */
    }

        .status-rejected:hover {
            background-color: red; /* darker green */
            color: red;
        }
</style>

<div id="parent" class="container-fluid">
    <input id="rptCode" type="hidden" value="019" />
    <input id="rptTitle" class="lblHeading" type="hidden" value="@ViewBag.ReportTitle" />
    <div id="dataLists" class="box panel panel-default">
        <div class="box-header with-border">

            <h5 class="box-title"><strong>@ViewBag.ReportTitle  </strong><strong id="filterString"></strong></h5>
            <button id="CardAllPO" class="btn btn-badges">
                Refresh
            </button>
            <button id="btnSendInvitation" class="invite-btn">
                Invite <i class="fas fa-paper-plane"></i>
            </button>


            <div id="buttons" class="box-tools pull-right">

            </div>
        </div>

        <div class="box-body" id="lstP">
            <table id="lstData" class="table table-bordered table-striped text-sm table-hover" style="width:100%">
                <thead class="sorted-asc">
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                    </tr>
                </tfoot>
            </table>
        </div>

    </div>
</div>


<!-- Add New User -->
<div id="AddUserModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header ModalHeaderColor">
                <h5 class="modal-title ModalLabelColor">Invitation Form</h5>
            </div>

            <div class="modal-body" style="background-color: #f9f9f9;">
                <div class="container-fluid">
                    <div class="row">

                        <!-- Supplier Dropdown -->
                        <div class="col-md-12" id="supplierDropdownDiv">
                            <div class="form-group">
                                <label class="ModalLabelColor" for="ddlUsers">Select User <span class="text-danger">*</span></label>
                                @Html.DropDownList("ddlUsers", null, new { id = "ddlUsers", @name = "ddlUsers", @class = "form-control" })

                            </div>
                        </div>
                        <!-- Email -->
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="ModalLabelColor" for="Email">Email Address <span class="text-danger">*</span></label>
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Enter email" } })
                            </div>
                        </div>


                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button id="btnAddNewCancel" type="button" class="btn btnClose" data-dismiss="modal">Close</button>
                <button id="btnAddNewSend" type="button" class="btn btn-hover-save">Invitation</button>

            </div>
        </div>

    </div>
</div>

<script src="~/Scripts/Message.js"></script>
<script>
        ToggleDataList(false);

    LoadData();
    function LoadData() {
        $('#tblBody').empty();
        $('#lstData').DataTable().clear();
        $('#lstData').DataTable().destroy();
        var isSingleRow = false;

        $.ajax({

            cache: false,
            type: 'GET',
            url: '/Tool/GetToolUser',
            data: {

            },
            datatype: JSON,
            success: function (data) {
                $('#filterString').append(data.filterString);
                $('#tblBody').empty();
                $('#lstData').DataTable().clear();
                $('#lstData').DataTable().destroy();

                if (!isSingleRow) {
                    var columnDef = [
                        { "data": "Username", "title": "User Name", "className": "text-center" },
                        {
                            "data": "UserId", "title": "User ID", "className": "text-center",
                            "render": function (data, type, row) {
                                return formatDecimal(data);
                            }
                        },
                        { "data": "FirstName", "title": "First Name", "className": "text-center","visible": false},
                        { "data": "LastName", "title": "Last Name", "className": "text-center", "visible": false },
                        { "data": "Email", "title": "Supplier Email", "className": "text-center" },
                        {
                            data: "Status",
                            title: "Status",
                            width: "130px",
                            className: "text-center",
                            render: function (data, type, row) {
                                let colorClass = "";
                                if (data === "Active") {
                                    colorClass = "status-active";
                                } else if (data === "Pending") {
                                    colorClass = "status-pending";
                                } else if (data === "Received") {
                                    colorClass = "status-received";
                                }
                                else if (data === "Rejected") {
                                    colorClass = "status-rejected";
                                }
                                return `<span class="${colorClass}">${data}</span>`;
                            }
                        }

                    ]


                    ToggleDataList(true);

                    MakeDataGridForTraining('lstData', data.lstTool, 0, columnDef, 'buttons', true, true, false, false);

                }
                if (data["ErrorMessage"] != null) {
                    $('.dataTables_empty > p').text(data["ErrorMessage"]);
                }
            },
            onerror: function (r) { r },
            failure: function (r) { r }
        });
    }

      $('#btnSendInvitation').click(function () {
        $('#Email').val('');
        $('#AddUserModal').modal('show');
    });

     $('#ddlUsers').on('change', function () {
      var userId = $(this).val();

      if (userId) {
          $.ajax({
              url: '@Url.Action("GetUserEmail", "Tool")',
              type: 'GET',
              data: { vendorId: userId },
              success: function (response) {
                  $('#Email').val(response);
              },
              error: function () {
                  alert('Failed to fetch email.');
              }
          });
      } else {
          $('#Email').val('');
      }
  });

    $('#btnAddNewSend').click(function () {
        var Type = "Tool Crib";
        var Email = $('#Email').val();
        var userId = $('#ddlUsers').val();
        var Username = $('#ddlUsers option:selected').text();

        // Check if no valid option is selected
        if (userId === "" || Username === "Select from List") {
            MsgToast("Oops!", "Please select supplier", "error");
            return; // Stop further execution
        }

        $.ajax({
            cache: false,
            type: 'GET',
            url: '/Tool/SendInvite',
            data: {
                Type: Type,
                Email: Email,
                userId: userId,
                username: Username
            },
            datatype: JSON,
            success: function (data) {
                if (data.Message === "OK") {
                    MsgToast("Success!", "Invitation has been sent!", "success");

                    // Wait 10 seconds (10,000 milliseconds) before executing LoadData and hiding modal
                    //setTimeout(function () {
                        LoadData();
                        $('#AddUserModal').modal('hide');
                    //}, 5000);
                } else if (data.Message === "Already") {
                    MsgToast("Warning!", "User already exists", "error");
                } else {
                    MsgToast("Oops!", "An error occurred!", "error");
                }
            },
            error: function (r) {
                console.error("Error:", r);
            },
            failure: function (r) {
                console.error("Failure:", r);
            }
        });
    });

    $('#CardAllPO').click(function () {
        OpenPage('/Tool/Index', 'Yousuf');
    });
    function MakeDataGridForTraining(tableId, data, tableHeight, columns, buttonId, search, isScrollX, footerFunction, isFramed, detailed, reportTitleId, rowSelection, lstHeight) {
        var isFooter = footerFunction === undefined || footerFunction === false ? false : true;
        var isFramed = isFramed === undefined || isFramed === false ? false : true;
        var isDetailed = detailed === undefined ? false : true;
        var reportTitle = '';

        if (reportTitleId === undefined)
            reportTitle = $('.box-title').text();
        else
            reportTitle = reportTitleId;

        var gridHeight = 0;

        isScrollX = isScrollX === undefined ? false : true;
        if (search === undefined) { search = true; }

        var gridButtonsClass = '';
        var gridSearchBoxClass = '';
        if (isDetailed === true) {
            gridButtonsClass = 'btn-header btn-box-tool';
            gridSearchBoxClass = 'bg-white';
            gridButtonSize = 30;
        }
        else {
            gridButtonsClass = 'btn-header btn-box-tool';
            gridSearchBoxClass = 'btn-box-tool bg-white txtSearch';
            gridButtonSize = 30;
        }

        var boxtool;
        if (search === true) {
            if (isFramed) {
                $('#trHeadSearch').empty();
                boxtool = `
        <div class="search-container">
            <i class="fa fa-search search-icon"></i>
            <input class="txtSearch-frame" id="txtFrameSearch" type="text" placeholder="Search..">
        </div>`;
                $('#trHeadSearch').append(boxtool);
            } else {
                $('#' + buttonId).empty();
                boxtool = `
        <div class="search-container">
            <i class="fa fa-search search-icon"></i>
            <input class="txtSearch-frame" id="txtFrameSearch${tableId}" type="text" placeholder="Search..">
        </div>`;
                $('#' + buttonId).append(boxtool);
            }
        }
        else {
            if (isFramed) {
                $('#trHeadSearch').empty();
                boxtool = '<input class="txtSearch-frame" id="txtFrameSearch" type="text" placeholder="Search.." style="padding-left: 10px !important;" >';
                $('#trHeadSearch').append(boxtool);
            }
            else {
                $('#' + buttonId).empty();

            }
        }

        var table = $('#' + tableId).DataTable({
            order: [],
            createdRow: rowSelection,
            data: data,
            columns: columns,
            paging: true,
            ordering: true,
            searching: search,
            deferRender: true,
            destroy: true,
            pagingType: 'full',
            pageLength: 20,
            scrollCollapse: false,
            scrollX: isScrollX,
            colReorder: true,
            orderClasses: false,
            deferRender: true,
            select: true,
            colResize: true,
            //scrollY: gridHeight,
            autoWidth: true,
            footerCallback: footerFunction,
            language: {
                emptyTable: "<p style=\"text-align:left;\">No record(s) found.</p>",
                zeroRecords: "<p style=\"text-align:left;\">No matching record(s) found</p>",
                info: "Showing _START_ to _END_ of _TOTAL_ entries",
                oPaginate: {
                    sNext: '<i class="fa fa-angle-right"></i>',
                    sPrevious: '<i class="fa fa-angle-left"></i>',
                    sFirst: '<i class="fa fa-angle-double-left"></i>',
                    sLast: '<i class="fa fa-angle-double-right"></i>'
                }
            },
            "dom": "<'row'<'col-sm-12'tr>>" +
                "<'row'<'col-sm-5 dataTables_info' i><'col-sm-6 ms-3 dataTables_paginate' p>>",
            buttons: [
                {
                    extend: 'copyHtml5',
                    footer: true,
                    text: '<span><span class="fa-stack"><i class="fa fa-circle fa-stack-2x" style="color: rgb(244, 164, 37);"></i><i class="fa fa-copy fa-stack-1x" style="color: white;"></i></span></span>',
                    titleAttr: 'Copy',
                    title: reportTitle,
                    filename: 'DataExport',
                    exportOptions: {
                        //columns: ':visible'
                        columns: 'th:not(.notexport)' // Excluding columns while exporting
                    }
                },
                {
                    extend: 'excelHtml5',
                    footer: true,
                    text: '<span><span class="fa-stack"><i class="fa fa-circle fa-stack-2x" style="color: rgb(0, 179, 98);"></i><i class="fa fa-file-excel fa-stack-1x" style="color: white;"></i></span></span>',
                    titleAttr: 'Export to excel',
                    title: reportTitle,
                    filename: 'DataExport', //Added By Tahir
                    exportOptions: {
                        //columns: ':visible'
                        columns: 'th:not(.notexport)'
                    }
                },
                {
                    extend: 'print',
                    footer: true,
                    text: '<span><span class="fa-stack"><i class="fa fa-circle fa-stack-2x" style="color: rgb(0, 204, 255);"></i><i class="fa fa-print fa-stack-1x" style="color: white;"></i></span></span>',
                    titleAttr: 'Print',
                    title: '',
                    messageTop: function () { return '<h4>' + reportTitle + '</h4>'; },
                    filename: 'DataExport',
                    exportOptions: {
                        // columns: ':visible'
                        columns: 'th:not(.notexport)'
                    }
                }
            ],
            select: true
        });
        table.buttons().container()
            .appendTo('#buttons');

        table.button(0).nodes().removeClass('btn btn-default buttons-copy buttons-html5');
        table.button(0).nodes().addClass(gridButtonsClass);

        table.button(1).nodes().removeClass('btn btn-default buttons-excel buttons-html5');
        table.button(1).nodes().addClass(gridButtonsClass);

        table.button(2).nodes().removeClass('btn btn-default buttons-excel buttons-html5');
        table.button(2).nodes().addClass(gridButtonsClass);

        var dsgndby = $('.modal-footer > #designedby ').html();

        if (dsgndby === "") {
            $('#designedBy').html($('.desgndBy').html());
        }

        var layoutHeader = $('nav').innerHeight();
        var cardHeader = $('.box-header').innerHeight();
        var tableHeader = $('.dataTables_scrollHead').innerHeight();
        var tableFooter = 0;
        var cardFooterH = 30;

        if (isFooter === true)
            tableFooter = $('.dataTables_scrollFoot').innerHeight();


        var parentHeight = $('#' + lstHeight).innerHeight();
        if (parentHeight == undefined)
            parentHeight = window.innerHeight;
        else
            parentHeight = $('#' + lstHeight).innerHeight();

        if (isFooter === true)
            tableFooter = $('#' + tableId + ' > tfoot').innerHeight();

        var browserHeight = parentHeight;
        if (tableHeight === 0) {
            if (layoutHeader === undefined)
                gridHeight = browserHeight - (cardHeader + tableHeader + tableFooter + cardFooterH);
            else
                gridHeight = browserHeight - (layoutHeader + cardHeader + tableHeader + tableFooter + cardFooterH);
        }
        else { gridHeight = tableHeight; }

        var topHeader = $('#topHeader').innerHeight();
        if (topHeader > 0)
            gridHeight = gridHeight - (topHeader + 1);

        gridHeight = gridHeight - 6;

        $('.dataTables_scrollBody').css('height', gridHeight + 'px');
        table.columns.adjust().draw();

        $('#txtFrameSearch' + tableId).on('keyup change', function () {
            table.search(this.value).draw();
        });
        $('.dataTables_filter').hide();
        table.columns.adjust().draw();


        //return table;
    }
    function MsgToast(msg, title, type) {

        toastr.options = {
            closeButton: true,
            debug: false,
            newestOnTop: false,
            progressBar: true,
            positionClass: 'toast-top-right',
            preventDuplicates: true,
            onclick: null
        };



        var $toast = toastr[type](title, msg); // Wire up an event handler to a button in the toast, if it exists
        $toastlast = $toast;

        if (typeof $toast === 'undefined') {
            return;
        }


    }
    function formatDecimal(data) {
        if (!data) return '';

        data = data.toString().trim();

        // If it's a whole number with .0 (e.g. "123.0") → "123"
        if (/^\d+\.0+$/.test(data)) {
            return data.replace(/\.0+$/, '');
        }

        // If it's numeric with decimals (e.g. "456.50") → "456.5"
        if (/^\d+\.\d+$/.test(data)) {
            return parseFloat(data).toString();
        }

        // Otherwise (alphanumeric or plain int), leave as-is
        return data;
    }
    function formatDecimal(data) {
        if (!data) return '';

        data = data.toString().trim();

        // If it's a whole number with .0 (e.g. "123.0") → "123"
        if (/^\d+\.0+$/.test(data)) {
            return data.replace(/\.0+$/, '');
        }

        // If it's numeric with decimals (e.g. "456.50") → "456.5"
        if (/^\d+\.\d+$/.test(data)) {
            return parseFloat(data).toString();
        }

        // Otherwise (alphanumeric or plain int), leave as-is
        return data;
    }

</script>